{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { DetectDocumentTextCommand, AnalyzeDocumentCommand, FeatureType, StartDocumentTextDetectionCommand, StartDocumentAnalysisCommand, GetDocumentTextDetectionCommand, JobStatus, GetDocumentAnalysisCommand } from \"@aws-sdk/client-textract\";\nimport { GetObjectCommand } from \"@aws-sdk/client-s3\";\nimport { ReceiveMessageCommand, DeleteMessageCommand } from \"@aws-sdk/client-sqs\";\n/**\r\n * Encapsulates the data model used by the application and wraps all calls to AWS\r\n * in a common place. The React application subscribes to the model so that it is\r\n * informed whenever the underlying data changes.\r\n */\n\nexport default class TextractModel {\n  /**\r\n   * @param s3: An Amazon Simple Storage Service (Amazon S3) client.\r\n   * @param sqs: An Amazon Simple Queue Service (Amazon SQS) client.\r\n   * @param textract: An Amazon Textract client.\r\n   * @param SNSTopicArn: The Amazon Resource Name (ARN) of an Amazon Simple\r\n   *                     Notification Service (Amazon SNS) topic. Amazon Textract\r\n   *                     published a notification to this topic whenever a job\r\n   *                     completes.\r\n   * @param RoleArn: The ARN of an AWS Identity and Access Management (IAM) role that\r\n   *                 can be assumed by Amazon Textract and grants permission to publish\r\n   *                 to the Amazon SNS topic.\r\n   * @param QueueUrl: The URL of an Amazon SQS queue that is subscribed to the\r\n   *                  Amazon SNS topic. This queue is polled for status messages after\r\n   *                  a job is started.\r\n   * @param ConfigError: An error message that indicates the demo application is not\r\n   *                     configured correctly.\r\n   */\n  constructor(_ref) {\n    let {\n      s3,\n      sqs,\n      textract,\n      SNSTopicArn,\n      RoleArn,\n      QueueUrl,\n      ConfigError\n    } = _ref;\n    this.s3 = s3;\n    this.sqs = sqs;\n    this.textract = textract;\n    this.snsTopicArn = SNSTopicArn;\n    this.roleArn = RoleArn;\n    this.queueUrl = QueueUrl;\n    this.extraction = null;\n    this.imageData = {\n      bucketName: \"\",\n      objectKey: \"\"\n    };\n    this.onChanges = [];\n    this.modelError = ConfigError;\n  }\n  /**\r\n   * Subscribes the caller to be informed of data changes.\r\n   *\r\n   * @param onChange: A function that is called when data changes.\r\n   */\n\n\n  subscribe(onChange) {\n    this.onChanges.push(onChange);\n  }\n  /**\r\n   * Called when data changes to inform each subscriber of the change.\r\n   */\n\n\n  inform() {\n    this.onChanges.forEach(sub => sub());\n  }\n  /**\r\n   * Reads all data from a ReadableStream and reduces it to a string. This function\r\n   * is used to retrieve data from an Amazon S3 object.\r\n   *\r\n   * @param stream: A ReadableStream.\r\n   * @returns {Promise<string>}: A Promise that contains the returned data.\r\n   */\n\n\n  async _readStream(stream) {\n    let data = \"\";\n    const reader = stream.getReader();\n\n    try {\n      while (true) {\n        const {\n          done,\n          value\n        } = await reader.read();\n\n        if (done) {\n          console.log(\"Done with stream.\");\n          return data;\n        }\n\n        data += value.reduce(function (a, b) {\n          return a + String.fromCharCode(b);\n        }, \"\");\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n  /**\r\n   * Loads an image from Amazon S3 and returns it as a Base64 string.\r\n   *\r\n   * @param bucketName: The name of the bucket that contains the image.\r\n   * @param objectKey: The name of the image.\r\n   * @returns {Promise<{bucketName: string, objectKey: string, base64Data: string}>}:\r\n   *      A Promise that contains the image location and data as a Base64 string.\r\n   */\n\n\n  async loadImage(bucketName, objectKey) {\n    this.modelError = null;\n    this.extraction = null;\n    console.log(`Loading from ${bucketName}:${objectKey}`);\n\n    try {\n      const resp = await this.s3.send(new GetObjectCommand({\n        Bucket: bucketName,\n        Key: objectKey\n      }));\n      const str_data = await this._readStream(resp.Body);\n      this.imageData = {\n        bucketName: bucketName,\n        objectKey: objectKey,\n        base64Data: btoa(str_data).replace(/.{76}(?=.)/g, \"$&\\n\")\n      };\n    } catch (error) {\n      console.log(error.message);\n      this.modelError = error.message;\n\n      if (error.Code === \"AccessDenied\") {\n        this.modelError += \". This may mean the image you entered is not present in \" + \"the specified bucket.\";\n      }\n    } finally {\n      this.inform();\n    }\n\n    return this.imageData;\n  }\n  /**\r\n   * Calls synchronous Amazon Textract functions to extract data from an image.\r\n   * Synchronous Amazon Textract functions can be awaited and do not require starting\r\n   * a job or polling an Amazon SQS queue for status.\r\n   *\r\n   * Data returned from Amazon Textract is stored in `this.extraction`.\r\n   *\r\n   * @param extractType: The type of data to extract from the image.\r\n   * @returns {Promise<void>}\r\n   */\n\n\n  async _extractDocumentSynchronous(extractType) {\n    const input = {\n      Document: {\n        S3Object: {\n          Bucket: this.imageData.bucketName,\n          Name: this.imageData.objectKey\n        }\n      }\n    };\n    let command;\n\n    if (extractType === \"text\") {\n      command = new DetectDocumentTextCommand(input);\n    } else {\n      input[\"FeatureTypes\"] = extractType === \"form\" ? [FeatureType.FORMS] : [FeatureType.TABLES];\n      command = new AnalyzeDocumentCommand(input);\n    }\n\n    const textractResponse = await this.textract.send(command);\n    this.extraction = {\n      Name: this.imageData.objectKey,\n      ExtractType: extractType,\n      Children: this._make_page_hierarchy(textractResponse[\"Blocks\"])\n    };\n    console.log(textractResponse);\n    this.inform();\n  }\n  /**\r\n   * Calls asynchronous Amazon Textract functions to extract data from an image.\r\n   * Asynchronous Amazon Textract functions return immediately with a job ID. Amazon\r\n   * Textract notifies the specified Amazon SNS topic of job status, and Amazon SNS\r\n   * sends a message to the subscribed Amazon SQS queue. This function polls the queue\r\n   * for status messages until the job completes, and then gets the data for the job\r\n   * from Amazon Textract.\r\n   *\r\n   * Data returned from Amazon Textract is stored in `this.extraction`.\r\n   *\r\n   * @param extractType: The type of data to extract from the image.\r\n   * @returns {Promise<void>}\r\n   */\n\n\n  async _extractDocumentAsynchronous(extractType) {\n    const input = {\n      DocumentLocation: {\n        S3Object: {\n          Bucket: this.imageData.bucketName,\n          Name: this.imageData.objectKey\n        }\n      },\n      NotificationChannel: {\n        SNSTopicArn: this.snsTopicArn,\n        RoleArn: this.roleArn\n      }\n    };\n    let command;\n\n    if (extractType === \"text\") {\n      command = new StartDocumentTextDetectionCommand(input);\n    } else {\n      input[\"FeatureTypes\"] = extractType === \"form\" ? [FeatureType.FORMS] : [FeatureType.TABLES];\n      command = new StartDocumentAnalysisCommand(input);\n    }\n\n    const {\n      JobId: jobId\n    } = await this.textract.send(command);\n    console.log(`JobId: ${jobId}`);\n    const model = this;\n    let waitTime = 0;\n\n    async function getJob() {\n      const {\n        Messages\n      } = await model.sqs.send(new ReceiveMessageCommand({\n        QueueUrl: model.queueUrl,\n        MaxNumberOfMessages: 1\n      }));\n\n      if (Messages) {\n        console.log(`Message[0]: ${Messages[0].Body}`);\n        await model.sqs.send(new DeleteMessageCommand({\n          QueueUrl: model.queueUrl,\n          ReceiptHandle: Messages[0].ReceiptHandle\n        }));\n\n        if (JSON.parse(JSON.parse(Messages[0].Body).Message).Status === JobStatus.SUCCEEDED) {\n          let getCommand;\n\n          if (extractType === \"text\") {\n            getCommand = new GetDocumentTextDetectionCommand({\n              JobId: jobId\n            });\n          } else {\n            getCommand = new GetDocumentAnalysisCommand({\n              JobId: jobId\n            });\n          }\n\n          const {\n            Blocks\n          } = await model.textract.send(getCommand);\n          model.extraction = {\n            Name: model.imageData.objectKey,\n            ExtractType: extractType,\n            Children: model._make_page_hierarchy(Blocks)\n          };\n          model.inform();\n        }\n      } else {\n        const tick = 5000;\n        waitTime += tick;\n        console.log(`Waited ${waitTime / 1000} seconds. No messages yet.`);\n        setTimeout(getJob, tick);\n      }\n    }\n\n    await getJob(jobId);\n  }\n  /**\r\n   * Calls Amazon Textract to extract data from an image.\r\n   *\r\n   * @param syncType: Indicates the type of API to call to perform the extraction.\r\n   * @param extractType: Indicates the type of data to extract.\r\n   * @returns {Promise<void>}\r\n   */\n\n\n  async extractDocument(syncType, extractType) {\n    this.modelError = null;\n    this.extraction = null;\n\n    try {\n      if (syncType === \"sync\") {\n        await this._extractDocumentSynchronous(extractType);\n      } else {\n        await this._extractDocumentAsynchronous(extractType);\n      }\n    } catch (error) {\n      console.log(error.message);\n      this.modelError = error.message;\n    } finally {\n      this.inform();\n    }\n  }\n  /**\r\n   * Adds hierarchical children to a structure based on the list of child IDs\r\n   * in the Amazon Textract data.\r\n   *\r\n   * @param block: The parent block.\r\n   * @param block_dict: A dictionary of blocks returned by Amazon Textract, for\r\n   *                    fast lookup by ID.\r\n   */\n\n\n  _add_children(block, block_dict) {\n    const rels_list = block.Relationships || [];\n    rels_list.forEach(rels => {\n      if (rels.Type === \"CHILD\") {\n        block[\"Children\"] = [];\n        rels.Ids.forEach(relId => {\n          const kid = block_dict[relId];\n          block[\"Children\"].push(kid);\n\n          this._add_children(kid, block_dict);\n        });\n      }\n    });\n  }\n  /**\r\n   * Builds a hierarchy of blocks out of data returned by Amazon Textract. This\r\n   * hierarchy is used by the React application to display a tree of checkboxes.\r\n   *\r\n   * @param blocks: The flat list of blocks returned by Amazon Textract.\r\n   * @returns {[]}: A hierarchical tree of blocks.\r\n   */\n\n\n  _make_page_hierarchy(blocks) {\n    const block_dict = {};\n    blocks.forEach(block => block_dict[block.Id] = block);\n    const pages = [];\n    blocks.forEach(block => {\n      if (block.BlockType === \"PAGE\") {\n        pages.push(block);\n\n        this._add_children(block, block_dict);\n      }\n    });\n    return pages;\n  }\n\n}","map":{"version":3,"names":["DetectDocumentTextCommand","AnalyzeDocumentCommand","FeatureType","StartDocumentTextDetectionCommand","StartDocumentAnalysisCommand","GetDocumentTextDetectionCommand","JobStatus","GetDocumentAnalysisCommand","GetObjectCommand","ReceiveMessageCommand","DeleteMessageCommand","TextractModel","constructor","s3","sqs","textract","SNSTopicArn","RoleArn","QueueUrl","ConfigError","snsTopicArn","roleArn","queueUrl","extraction","imageData","bucketName","objectKey","onChanges","modelError","subscribe","onChange","push","inform","forEach","sub","_readStream","stream","data","reader","getReader","done","value","read","console","log","reduce","a","b","String","fromCharCode","releaseLock","loadImage","resp","send","Bucket","Key","str_data","Body","base64Data","btoa","replace","error","message","Code","_extractDocumentSynchronous","extractType","input","Document","S3Object","Name","command","FORMS","TABLES","textractResponse","ExtractType","Children","_make_page_hierarchy","_extractDocumentAsynchronous","DocumentLocation","NotificationChannel","JobId","jobId","model","waitTime","getJob","Messages","MaxNumberOfMessages","ReceiptHandle","JSON","parse","Message","Status","SUCCEEDED","getCommand","Blocks","tick","setTimeout","extractDocument","syncType","_add_children","block","block_dict","rels_list","Relationships","rels","Type","Ids","relId","kid","blocks","Id","pages","BlockType"],"sources":["C:/Users/icean/aws-doc-sdk-examples/javascriptv3/example_code/cross-services/textract-react/src/TextractModel.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport {\r\n  DetectDocumentTextCommand,\r\n  AnalyzeDocumentCommand,\r\n  FeatureType,\r\n  StartDocumentTextDetectionCommand,\r\n  StartDocumentAnalysisCommand,\r\n  GetDocumentTextDetectionCommand,\r\n  JobStatus,\r\n  GetDocumentAnalysisCommand,\r\n} from \"@aws-sdk/client-textract\";\r\nimport { GetObjectCommand } from \"@aws-sdk/client-s3\";\r\nimport {\r\n  ReceiveMessageCommand,\r\n  DeleteMessageCommand,\r\n} from \"@aws-sdk/client-sqs\";\r\n\r\n/**\r\n * Encapsulates the data model used by the application and wraps all calls to AWS\r\n * in a common place. The React application subscribes to the model so that it is\r\n * informed whenever the underlying data changes.\r\n */\r\nexport default class TextractModel {\r\n  /**\r\n   * @param s3: An Amazon Simple Storage Service (Amazon S3) client.\r\n   * @param sqs: An Amazon Simple Queue Service (Amazon SQS) client.\r\n   * @param textract: An Amazon Textract client.\r\n   * @param SNSTopicArn: The Amazon Resource Name (ARN) of an Amazon Simple\r\n   *                     Notification Service (Amazon SNS) topic. Amazon Textract\r\n   *                     published a notification to this topic whenever a job\r\n   *                     completes.\r\n   * @param RoleArn: The ARN of an AWS Identity and Access Management (IAM) role that\r\n   *                 can be assumed by Amazon Textract and grants permission to publish\r\n   *                 to the Amazon SNS topic.\r\n   * @param QueueUrl: The URL of an Amazon SQS queue that is subscribed to the\r\n   *                  Amazon SNS topic. This queue is polled for status messages after\r\n   *                  a job is started.\r\n   * @param ConfigError: An error message that indicates the demo application is not\r\n   *                     configured correctly.\r\n   */\r\n  constructor({\r\n    s3,\r\n    sqs,\r\n    textract,\r\n    SNSTopicArn,\r\n    RoleArn,\r\n    QueueUrl,\r\n    ConfigError,\r\n  }) {\r\n    this.s3 = s3;\r\n    this.sqs = sqs;\r\n    this.textract = textract;\r\n    this.snsTopicArn = SNSTopicArn;\r\n    this.roleArn = RoleArn;\r\n    this.queueUrl = QueueUrl;\r\n    this.extraction = null;\r\n    this.imageData = { bucketName: \"\", objectKey: \"\" };\r\n    this.onChanges = [];\r\n    this.modelError = ConfigError;\r\n  }\r\n\r\n  /**\r\n   * Subscribes the caller to be informed of data changes.\r\n   *\r\n   * @param onChange: A function that is called when data changes.\r\n   */\r\n  subscribe(onChange) {\r\n    this.onChanges.push(onChange);\r\n  }\r\n\r\n  /**\r\n   * Called when data changes to inform each subscriber of the change.\r\n   */\r\n  inform() {\r\n    this.onChanges.forEach((sub) => sub());\r\n  }\r\n\r\n  /**\r\n   * Reads all data from a ReadableStream and reduces it to a string. This function\r\n   * is used to retrieve data from an Amazon S3 object.\r\n   *\r\n   * @param stream: A ReadableStream.\r\n   * @returns {Promise<string>}: A Promise that contains the returned data.\r\n   */\r\n  async _readStream(stream) {\r\n    let data = \"\";\r\n    const reader = stream.getReader();\r\n    try {\r\n      while (true) {\r\n        const { done, value } = await reader.read();\r\n        if (done) {\r\n          console.log(\"Done with stream.\");\r\n          return data;\r\n        }\r\n\r\n        data += value.reduce(function (a, b) {\r\n          return a + String.fromCharCode(b);\r\n        }, \"\");\r\n      }\r\n    } finally {\r\n      reader.releaseLock();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loads an image from Amazon S3 and returns it as a Base64 string.\r\n   *\r\n   * @param bucketName: The name of the bucket that contains the image.\r\n   * @param objectKey: The name of the image.\r\n   * @returns {Promise<{bucketName: string, objectKey: string, base64Data: string}>}:\r\n   *      A Promise that contains the image location and data as a Base64 string.\r\n   */\r\n  async loadImage(bucketName, objectKey) {\r\n    this.modelError = null;\r\n    this.extraction = null;\r\n    console.log(`Loading from ${bucketName}:${objectKey}`);\r\n    try {\r\n      const resp = await this.s3.send(\r\n        new GetObjectCommand({ Bucket: bucketName, Key: objectKey })\r\n      );\r\n      const str_data = await this._readStream(resp.Body);\r\n      this.imageData = {\r\n        bucketName: bucketName,\r\n        objectKey: objectKey,\r\n        base64Data: btoa(str_data).replace(/.{76}(?=.)/g, \"$&\\n\"),\r\n      };\r\n    } catch (error) {\r\n      console.log(error.message);\r\n      this.modelError = error.message;\r\n      if (error.Code === \"AccessDenied\") {\r\n        this.modelError +=\r\n          \". This may mean the image you entered is not present in \" +\r\n          \"the specified bucket.\";\r\n      }\r\n    } finally {\r\n      this.inform();\r\n    }\r\n    return this.imageData;\r\n  }\r\n\r\n  /**\r\n   * Calls synchronous Amazon Textract functions to extract data from an image.\r\n   * Synchronous Amazon Textract functions can be awaited and do not require starting\r\n   * a job or polling an Amazon SQS queue for status.\r\n   *\r\n   * Data returned from Amazon Textract is stored in `this.extraction`.\r\n   *\r\n   * @param extractType: The type of data to extract from the image.\r\n   * @returns {Promise<void>}\r\n   */\r\n  async _extractDocumentSynchronous(extractType) {\r\n    const input = {\r\n      Document: {\r\n        S3Object: {\r\n          Bucket: this.imageData.bucketName,\r\n          Name: this.imageData.objectKey,\r\n        },\r\n      },\r\n    };\r\n    let command;\r\n    if (extractType === \"text\") {\r\n      command = new DetectDocumentTextCommand(input);\r\n    } else {\r\n      input[\"FeatureTypes\"] =\r\n        extractType === \"form\" ? [FeatureType.FORMS] : [FeatureType.TABLES];\r\n      command = new AnalyzeDocumentCommand(input);\r\n    }\r\n\r\n    const textractResponse = await this.textract.send(command);\r\n    this.extraction = {\r\n      Name: this.imageData.objectKey,\r\n      ExtractType: extractType,\r\n      Children: this._make_page_hierarchy(textractResponse[\"Blocks\"]),\r\n    };\r\n    console.log(textractResponse);\r\n    this.inform();\r\n  }\r\n\r\n  /**\r\n   * Calls asynchronous Amazon Textract functions to extract data from an image.\r\n   * Asynchronous Amazon Textract functions return immediately with a job ID. Amazon\r\n   * Textract notifies the specified Amazon SNS topic of job status, and Amazon SNS\r\n   * sends a message to the subscribed Amazon SQS queue. This function polls the queue\r\n   * for status messages until the job completes, and then gets the data for the job\r\n   * from Amazon Textract.\r\n   *\r\n   * Data returned from Amazon Textract is stored in `this.extraction`.\r\n   *\r\n   * @param extractType: The type of data to extract from the image.\r\n   * @returns {Promise<void>}\r\n   */\r\n  async _extractDocumentAsynchronous(extractType) {\r\n    const input = {\r\n      DocumentLocation: {\r\n        S3Object: {\r\n          Bucket: this.imageData.bucketName,\r\n          Name: this.imageData.objectKey,\r\n        },\r\n      },\r\n      NotificationChannel: {\r\n        SNSTopicArn: this.snsTopicArn,\r\n        RoleArn: this.roleArn,\r\n      },\r\n    };\r\n    let command;\r\n    if (extractType === \"text\") {\r\n      command = new StartDocumentTextDetectionCommand(input);\r\n    } else {\r\n      input[\"FeatureTypes\"] =\r\n        extractType === \"form\" ? [FeatureType.FORMS] : [FeatureType.TABLES];\r\n      command = new StartDocumentAnalysisCommand(input);\r\n    }\r\n\r\n    const { JobId: jobId } = await this.textract.send(command);\r\n    console.log(`JobId: ${jobId}`);\r\n\r\n    const model = this;\r\n    let waitTime = 0;\r\n    async function getJob() {\r\n      const { Messages } = await model.sqs.send(\r\n        new ReceiveMessageCommand({\r\n          QueueUrl: model.queueUrl,\r\n          MaxNumberOfMessages: 1,\r\n        })\r\n      );\r\n      if (Messages) {\r\n        console.log(`Message[0]: ${Messages[0].Body}`);\r\n        await model.sqs.send(\r\n          new DeleteMessageCommand({\r\n            QueueUrl: model.queueUrl,\r\n            ReceiptHandle: Messages[0].ReceiptHandle,\r\n          })\r\n        );\r\n        if (\r\n          JSON.parse(JSON.parse(Messages[0].Body).Message).Status ===\r\n          JobStatus.SUCCEEDED\r\n        ) {\r\n          let getCommand;\r\n          if (extractType === \"text\") {\r\n            getCommand = new GetDocumentTextDetectionCommand({ JobId: jobId });\r\n          } else {\r\n            getCommand = new GetDocumentAnalysisCommand({ JobId: jobId });\r\n          }\r\n          const { Blocks } = await model.textract.send(getCommand);\r\n          model.extraction = {\r\n            Name: model.imageData.objectKey,\r\n            ExtractType: extractType,\r\n            Children: model._make_page_hierarchy(Blocks),\r\n          };\r\n          model.inform();\r\n        }\r\n      } else {\r\n        const tick = 5000;\r\n        waitTime += tick;\r\n        console.log(`Waited ${waitTime / 1000} seconds. No messages yet.`);\r\n        setTimeout(getJob, tick);\r\n      }\r\n    }\r\n    await getJob(jobId);\r\n  }\r\n\r\n  /**\r\n   * Calls Amazon Textract to extract data from an image.\r\n   *\r\n   * @param syncType: Indicates the type of API to call to perform the extraction.\r\n   * @param extractType: Indicates the type of data to extract.\r\n   * @returns {Promise<void>}\r\n   */\r\n  async extractDocument(syncType, extractType) {\r\n    this.modelError = null;\r\n    this.extraction = null;\r\n\r\n    try {\r\n      if (syncType === \"sync\") {\r\n        await this._extractDocumentSynchronous(extractType);\r\n      } else {\r\n        await this._extractDocumentAsynchronous(extractType);\r\n      }\r\n    } catch (error) {\r\n      console.log(error.message);\r\n      this.modelError = error.message;\r\n    } finally {\r\n      this.inform();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds hierarchical children to a structure based on the list of child IDs\r\n   * in the Amazon Textract data.\r\n   *\r\n   * @param block: The parent block.\r\n   * @param block_dict: A dictionary of blocks returned by Amazon Textract, for\r\n   *                    fast lookup by ID.\r\n   */\r\n  _add_children(block, block_dict) {\r\n    const rels_list = block.Relationships || [];\r\n    rels_list.forEach((rels) => {\r\n      if (rels.Type === \"CHILD\") {\r\n        block[\"Children\"] = [];\r\n        rels.Ids.forEach((relId) => {\r\n          const kid = block_dict[relId];\r\n          block[\"Children\"].push(kid);\r\n          this._add_children(kid, block_dict);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Builds a hierarchy of blocks out of data returned by Amazon Textract. This\r\n   * hierarchy is used by the React application to display a tree of checkboxes.\r\n   *\r\n   * @param blocks: The flat list of blocks returned by Amazon Textract.\r\n   * @returns {[]}: A hierarchical tree of blocks.\r\n   */\r\n  _make_page_hierarchy(blocks) {\r\n    const block_dict = {};\r\n    blocks.forEach((block) => (block_dict[block.Id] = block));\r\n\r\n    const pages = [];\r\n    blocks.forEach((block) => {\r\n      if (block.BlockType === \"PAGE\") {\r\n        pages.push(block);\r\n        this._add_children(block, block_dict);\r\n      }\r\n    });\r\n    return pages;\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}