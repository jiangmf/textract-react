{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\icean\\\\aws-doc-sdk-examples\\\\javascriptv3\\\\example_code\\\\cross-services\\\\textract-react\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState, useEffect } from \"react\";\nimport { ImageLoader } from \"./ImageLoader\";\nimport { ImageDisplay } from \"./ImageDisplay\";\nimport { ExtractButtons } from \"./ExtractButtons\";\nimport { ExplorerCard } from \"./ExplorerCard\";\nimport { LoginCard } from \"./LoginCard\";\n/**\r\n * Main React application element. Includes panels for signing in, loading and\r\n * displaying an image, and exploring Amazon Textract output.\r\n *\r\n * @param props: Properties that determine how the app is displayed.\r\n *        props.isSignedIn: Indicates whether the user is signed in to Amazon Cognito.\r\n *        props.config: Configuration elements, such as Amazon S3 bucket name.\r\n *        props.model: Model data and functions for operating on the data.\r\n * @returns {JSX.Element} The App element.\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  const [shownPolygons, setShownPolygons] = useState([]);\n  const [extracting, setExtracting] = useState(false); // Toggles the display of a polygon by adding it to or removing it from the\n  // list of shown polygons.\n\n  const togglePolygon = (polyId, blockType, geometry, show) => {\n    console.log(`togglePolygon: ${polyId} ${geometry}, ${show}`);\n\n    if (show) {\n      setShownPolygons(shownPolygons.concat({\n        Id: polyId,\n        BlockType: blockType,\n        Geometry: geometry\n      }));\n    } else {\n      setShownPolygons(shownPolygons.filter(poly => poly.Id !== polyId));\n    }\n  };\n\n  useEffect(() => {\n    if (extracting && props.model.extraction) {\n      setExtracting(false);\n    }\n  }, [extracting, props.model.extraction]);\n\n  const loadImage = (bucketName, objectKey) => {\n    setShownPolygons([]);\n    props.model.loadImage(bucketName, objectKey);\n  };\n\n  const startExtraction = (syncType, extractType) => {\n    setShownPolygons([]);\n    setExtracting(true);\n    props.model.extractDocument(syncType, extractType);\n  };\n\n  const loginCard = props.isSignedIn ? null : /*#__PURE__*/_jsxDEV(LoginCard, {\n    loginUrl: props.config.LoginUrl\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-sm mt-3\",\n        children: [loginCard, /*#__PURE__*/_jsxDEV(ImageLoader, {\n          imageBucket: props.config.DefaultBucketName,\n          imageKey: props.config.DefaultImageName,\n          loadImage: loadImage,\n          modelError: props.model.modelError,\n          canLoad: props.isSignedIn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card mt-3\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body\",\n            children: [/*#__PURE__*/_jsxDEV(ImageDisplay, {\n              imageData: props.model.imageData.base64Data,\n              shownPolygons: shownPolygons\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ExtractButtons, {\n              hasImage: \"base64Data\" in props.model.imageData,\n              extracting: extracting,\n              extract: startExtraction\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-sm mt-3\",\n        children: /*#__PURE__*/_jsxDEV(ExplorerCard, {\n          header: \"Data explorer\",\n          extracting: extracting,\n          extraction: props.model.extraction,\n          togglePolygon: togglePolygon,\n          shownPolygons: shownPolygons\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"5Dd2kXYcn5NTe4m0UdGXWktsfF4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ImageLoader","ImageDisplay","ExtractButtons","ExplorerCard","LoginCard","App","props","shownPolygons","setShownPolygons","extracting","setExtracting","togglePolygon","polyId","blockType","geometry","show","console","log","concat","Id","BlockType","Geometry","filter","poly","model","extraction","loadImage","bucketName","objectKey","startExtraction","syncType","extractType","extractDocument","loginCard","isSignedIn","config","LoginUrl","DefaultBucketName","DefaultImageName","modelError","imageData","base64Data"],"sources":["C:/Users/icean/aws-doc-sdk-examples/javascriptv3/example_code/cross-services/textract-react/src/App.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { ImageLoader } from \"./ImageLoader\";\r\nimport { ImageDisplay } from \"./ImageDisplay\";\r\nimport { ExtractButtons } from \"./ExtractButtons\";\r\nimport { ExplorerCard } from \"./ExplorerCard\";\r\nimport { LoginCard } from \"./LoginCard\";\r\n\r\n/**\r\n * Main React application element. Includes panels for signing in, loading and\r\n * displaying an image, and exploring Amazon Textract output.\r\n *\r\n * @param props: Properties that determine how the app is displayed.\r\n *        props.isSignedIn: Indicates whether the user is signed in to Amazon Cognito.\r\n *        props.config: Configuration elements, such as Amazon S3 bucket name.\r\n *        props.model: Model data and functions for operating on the data.\r\n * @returns {JSX.Element} The App element.\r\n */\r\nfunction App(props) {\r\n  const [shownPolygons, setShownPolygons] = useState([]);\r\n  const [extracting, setExtracting] = useState(false);\r\n\r\n  // Toggles the display of a polygon by adding it to or removing it from the\r\n  // list of shown polygons.\r\n  const togglePolygon = (polyId, blockType, geometry, show) => {\r\n    console.log(`togglePolygon: ${polyId} ${geometry}, ${show}`);\r\n    if (show) {\r\n      setShownPolygons(\r\n        shownPolygons.concat({\r\n          Id: polyId,\r\n          BlockType: blockType,\r\n          Geometry: geometry,\r\n        })\r\n      );\r\n    } else {\r\n      setShownPolygons(shownPolygons.filter((poly) => poly.Id !== polyId));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (extracting && props.model.extraction) {\r\n      setExtracting(false);\r\n    }\r\n  }, [extracting, props.model.extraction]);\r\n\r\n  const loadImage = (bucketName, objectKey) => {\r\n    setShownPolygons([]);\r\n    props.model.loadImage(bucketName, objectKey);\r\n  };\r\n\r\n  const startExtraction = (syncType, extractType) => {\r\n    setShownPolygons([]);\r\n    setExtracting(true);\r\n    props.model.extractDocument(syncType, extractType);\r\n  };\r\n\r\n  const loginCard = props.isSignedIn ? null : (\r\n    <LoginCard loginUrl={props.config.LoginUrl} />\r\n  );\r\n\r\n  return (\r\n    <div className=\"App container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-sm mt-3\">\r\n          {loginCard}\r\n          <ImageLoader\r\n            imageBucket={props.config.DefaultBucketName}\r\n            imageKey={props.config.DefaultImageName}\r\n            loadImage={loadImage}\r\n            modelError={props.model.modelError}\r\n            canLoad={props.isSignedIn}\r\n          />\r\n          <div className=\"card mt-3\">\r\n            <div className=\"card-body\">\r\n              <ImageDisplay\r\n                imageData={props.model.imageData.base64Data}\r\n                shownPolygons={shownPolygons}\r\n              />\r\n              <ExtractButtons\r\n                hasImage={\"base64Data\" in props.model.imageData}\r\n                extracting={extracting}\r\n                extract={startExtraction}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-sm mt-3\">\r\n          <ExplorerCard\r\n            header=\"Data explorer\"\r\n            extracting={extracting}\r\n            extraction={props.model.extraction}\r\n            togglePolygon={togglePolygon}\r\n            shownPolygons={shownPolygons}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;;AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,SAASC,GAAT,CAAaC,KAAb,EAAoB;EAAA;;EAClB,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAC,EAAD,CAAlD;EACA,MAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,KAAD,CAA5C,CAFkB,CAIlB;EACA;;EACA,MAAMa,aAAa,GAAG,CAACC,MAAD,EAASC,SAAT,EAAoBC,QAApB,EAA8BC,IAA9B,KAAuC;IAC3DC,OAAO,CAACC,GAAR,CAAa,kBAAiBL,MAAO,IAAGE,QAAS,KAAIC,IAAK,EAA1D;;IACA,IAAIA,IAAJ,EAAU;MACRP,gBAAgB,CACdD,aAAa,CAACW,MAAd,CAAqB;QACnBC,EAAE,EAAEP,MADe;QAEnBQ,SAAS,EAAEP,SAFQ;QAGnBQ,QAAQ,EAAEP;MAHS,CAArB,CADc,CAAhB;IAOD,CARD,MAQO;MACLN,gBAAgB,CAACD,aAAa,CAACe,MAAd,CAAsBC,IAAD,IAAUA,IAAI,CAACJ,EAAL,KAAYP,MAA3C,CAAD,CAAhB;IACD;EACF,CAbD;;EAeAb,SAAS,CAAC,MAAM;IACd,IAAIU,UAAU,IAAIH,KAAK,CAACkB,KAAN,CAAYC,UAA9B,EAA0C;MACxCf,aAAa,CAAC,KAAD,CAAb;IACD;EACF,CAJQ,EAIN,CAACD,UAAD,EAAaH,KAAK,CAACkB,KAAN,CAAYC,UAAzB,CAJM,CAAT;;EAMA,MAAMC,SAAS,GAAG,CAACC,UAAD,EAAaC,SAAb,KAA2B;IAC3CpB,gBAAgB,CAAC,EAAD,CAAhB;IACAF,KAAK,CAACkB,KAAN,CAAYE,SAAZ,CAAsBC,UAAtB,EAAkCC,SAAlC;EACD,CAHD;;EAKA,MAAMC,eAAe,GAAG,CAACC,QAAD,EAAWC,WAAX,KAA2B;IACjDvB,gBAAgB,CAAC,EAAD,CAAhB;IACAE,aAAa,CAAC,IAAD,CAAb;IACAJ,KAAK,CAACkB,KAAN,CAAYQ,eAAZ,CAA4BF,QAA5B,EAAsCC,WAAtC;EACD,CAJD;;EAMA,MAAME,SAAS,GAAG3B,KAAK,CAAC4B,UAAN,GAAmB,IAAnB,gBAChB,QAAC,SAAD;IAAW,QAAQ,EAAE5B,KAAK,CAAC6B,MAAN,CAAaC;EAAlC;IAAA;IAAA;IAAA;EAAA,QADF;EAIA,oBACE;IAAK,SAAS,EAAC,eAAf;IAAA,uBACE;MAAK,SAAS,EAAC,KAAf;MAAA,wBACE;QAAK,SAAS,EAAC,aAAf;QAAA,WACGH,SADH,eAEE,QAAC,WAAD;UACE,WAAW,EAAE3B,KAAK,CAAC6B,MAAN,CAAaE,iBAD5B;UAEE,QAAQ,EAAE/B,KAAK,CAAC6B,MAAN,CAAaG,gBAFzB;UAGE,SAAS,EAAEZ,SAHb;UAIE,UAAU,EAAEpB,KAAK,CAACkB,KAAN,CAAYe,UAJ1B;UAKE,OAAO,EAAEjC,KAAK,CAAC4B;QALjB;UAAA;UAAA;UAAA;QAAA,QAFF,eASE;UAAK,SAAS,EAAC,WAAf;UAAA,uBACE;YAAK,SAAS,EAAC,WAAf;YAAA,wBACE,QAAC,YAAD;cACE,SAAS,EAAE5B,KAAK,CAACkB,KAAN,CAAYgB,SAAZ,CAAsBC,UADnC;cAEE,aAAa,EAAElC;YAFjB;cAAA;cAAA;cAAA;YAAA,QADF,eAKE,QAAC,cAAD;cACE,QAAQ,EAAE,gBAAgBD,KAAK,CAACkB,KAAN,CAAYgB,SADxC;cAEE,UAAU,EAAE/B,UAFd;cAGE,OAAO,EAAEoB;YAHX;cAAA;cAAA;cAAA;YAAA,QALF;UAAA;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QATF;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAwBE;QAAK,SAAS,EAAC,aAAf;QAAA,uBACE,QAAC,YAAD;UACE,MAAM,EAAC,eADT;UAEE,UAAU,EAAEpB,UAFd;UAGE,UAAU,EAAEH,KAAK,CAACkB,KAAN,CAAYC,UAH1B;UAIE,aAAa,EAAEd,aAJjB;UAKE,aAAa,EAAEJ;QALjB;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QAxBF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAsCD;;GAhFQF,G;;KAAAA,G;AAkFT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}