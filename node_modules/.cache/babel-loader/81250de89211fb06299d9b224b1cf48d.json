{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\icean\\\\aws-doc-sdk-examples\\\\javascriptv3\\\\example_code\\\\cross-services\\\\textract-react\\\\src\\\\ExplorerTree.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from \"react\";\nimport { ColorMap, FilterMap } from \"./Utils\";\n/**\r\n * An individual node that displays a block item from Amazon Textract as a checkbox.\r\n *\r\n * @param props: Properties that determine how the item is displayed.\r\n *        props.BlockType: The type of block detected by Amazon Textract.\r\n *        props.Children: The hierarchical children of this item.\r\n *        props.Geometry: Contains the list of points that define the bounding polygon\r\n *                        for the item.\r\n *        props.Id: The ID of the block.\r\n *        props.shownPolygons: The list of polygons currently being displayed.\r\n *        props.togglePolygon: A function that turns a polygon on or off.\r\n *        props.Text: The text detected for this item.\r\n * @returns {JSX.Element}\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExplorerNode = props => {\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"list-group-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-check\",\n      style: {\n        color: ColorMap[props.BlockType]\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-check-input\",\n        type: \"checkbox\",\n        id: props.Id,\n        checked: props.shownPolygons.some(poly => poly.Id === props.Id),\n        onChange: event => props.togglePolygon(props.Id, props.BlockType, props.Geometry, event.target.checked)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form-check-label\",\n        htmlFor: props.Id,\n        children: [props.BlockType, \" \", props.Text]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExplorerList, {\n      listClasses: [\"list-group\"],\n      Children: props.Children,\n      togglePolygon: props.togglePolygon,\n      shownPolygons: props.shownPolygons,\n      extractType: props.extractType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n/**\r\n * A list of Amazon Textract block items that share a common hierarchical parent.\r\n *\r\n * @param props: Properties that determines how the list is displayed.\r\n *        props.Children: The list of items to display.\r\n *        props.extractType: The type of extraction data to display.\r\n *        props.listClasses: Bootstrap classes that determine how the list is displayed.\r\n *        props.shownPolygons: The list of polygons currently being displayed.\r\n *        props.togglePolygon: A function that turns a polygon on or off.\r\n * @returns {JSX.Element}\r\n */\n\n\n_c = ExplorerNode;\n\nconst ExplorerList = props => {\n  let childNodes = props.Children ? props.Children.filter(child => {\n    return FilterMap[props.extractType].includes(child.BlockType);\n  }).map(child => {\n    return /*#__PURE__*/_jsxDEV(ExplorerNode, {\n      Id: child.Id,\n      BlockType: child.BlockType,\n      Text: child.Text,\n      Children: child.Children,\n      Geometry: child.Geometry,\n      togglePolygon: props.togglePolygon,\n      shownPolygons: props.shownPolygons,\n      extractType: props.extractType\n    }, child.Id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }, this);\n  }) : null;\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: props.listClasses.join(\" \"),\n    children: childNodes\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 10\n  }, this);\n};\n/**\r\n * A hierarchical tree of block items returned by Amazon Textract. Block items\r\n * represent parts of a document, such as pages, lines, and words.\r\n *\r\n * @param props: Properties that determine how the tree is displayed.\r\n *        props.extraction: Data returned by Amazon Textract in a hierarchical\r\n *                          structure.\r\n *        props.shownPolygons: The list of polygons currently being displayed.\r\n *        props.togglePolygon: A function that turns a polygon on or off.\r\n * @returns {JSX.Element}\r\n */\n\n\n_c2 = ExplorerList;\nexport const ExplorerTree = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-header\",\n      children: props.extraction.Name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: `calc(100vh - 200px)`,\n        overflowY: \"auto\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ExplorerList, {\n        listClasses: [\"list-group\", \"list-group-flush\"],\n        Children: props.extraction.Children,\n        extractType: props.extraction.ExtractType,\n        togglePolygon: props.togglePolygon,\n        shownPolygons: props.shownPolygons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_c3 = ExplorerTree;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ExplorerNode\");\n$RefreshReg$(_c2, \"ExplorerList\");\n$RefreshReg$(_c3, \"ExplorerTree\");","map":{"version":3,"names":["React","ColorMap","FilterMap","ExplorerNode","props","color","BlockType","Id","shownPolygons","some","poly","event","togglePolygon","Geometry","target","checked","Text","Children","extractType","ExplorerList","childNodes","filter","child","includes","map","listClasses","join","ExplorerTree","extraction","Name","height","overflowY","ExtractType"],"sources":["C:/Users/icean/aws-doc-sdk-examples/javascriptv3/example_code/cross-services/textract-react/src/ExplorerTree.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport React from \"react\";\r\nimport { ColorMap, FilterMap } from \"./Utils\";\r\n\r\n/**\r\n * An individual node that displays a block item from Amazon Textract as a checkbox.\r\n *\r\n * @param props: Properties that determine how the item is displayed.\r\n *        props.BlockType: The type of block detected by Amazon Textract.\r\n *        props.Children: The hierarchical children of this item.\r\n *        props.Geometry: Contains the list of points that define the bounding polygon\r\n *                        for the item.\r\n *        props.Id: The ID of the block.\r\n *        props.shownPolygons: The list of polygons currently being displayed.\r\n *        props.togglePolygon: A function that turns a polygon on or off.\r\n *        props.Text: The text detected for this item.\r\n * @returns {JSX.Element}\r\n */\r\nconst ExplorerNode = (props) => {\r\n  return (\r\n    <li className=\"list-group-item\">\r\n      <div className=\"form-check\" style={{ color: ColorMap[props.BlockType] }}>\r\n        <input\r\n          className=\"form-check-input\"\r\n          type=\"checkbox\"\r\n          id={props.Id}\r\n          checked={props.shownPolygons.some((poly) => poly.Id === props.Id)}\r\n          onChange={(event) =>\r\n            props.togglePolygon(\r\n              props.Id,\r\n              props.BlockType,\r\n              props.Geometry,\r\n              event.target.checked\r\n            )\r\n          }\r\n        />\r\n        <label className=\"form-check-label\" htmlFor={props.Id}>\r\n          {props.BlockType} {props.Text}\r\n        </label>\r\n      </div>\r\n      <ExplorerList\r\n        listClasses={[\"list-group\"]}\r\n        Children={props.Children}\r\n        togglePolygon={props.togglePolygon}\r\n        shownPolygons={props.shownPolygons}\r\n        extractType={props.extractType}\r\n      />\r\n    </li>\r\n  );\r\n};\r\n\r\n/**\r\n * A list of Amazon Textract block items that share a common hierarchical parent.\r\n *\r\n * @param props: Properties that determines how the list is displayed.\r\n *        props.Children: The list of items to display.\r\n *        props.extractType: The type of extraction data to display.\r\n *        props.listClasses: Bootstrap classes that determine how the list is displayed.\r\n *        props.shownPolygons: The list of polygons currently being displayed.\r\n *        props.togglePolygon: A function that turns a polygon on or off.\r\n * @returns {JSX.Element}\r\n */\r\nconst ExplorerList = (props) => {\r\n  let childNodes = props.Children\r\n    ? props.Children.filter((child) => {\r\n        return FilterMap[props.extractType].includes(child.BlockType);\r\n      }).map((child) => {\r\n        return (\r\n          <ExplorerNode\r\n            key={child.Id}\r\n            Id={child.Id}\r\n            BlockType={child.BlockType}\r\n            Text={child.Text}\r\n            Children={child.Children}\r\n            Geometry={child.Geometry}\r\n            togglePolygon={props.togglePolygon}\r\n            shownPolygons={props.shownPolygons}\r\n            extractType={props.extractType}\r\n          />\r\n        );\r\n      })\r\n    : null;\r\n\r\n  return <ul className={props.listClasses.join(\" \")}>{childNodes}</ul>;\r\n};\r\n\r\n/**\r\n * A hierarchical tree of block items returned by Amazon Textract. Block items\r\n * represent parts of a document, such as pages, lines, and words.\r\n *\r\n * @param props: Properties that determine how the tree is displayed.\r\n *        props.extraction: Data returned by Amazon Textract in a hierarchical\r\n *                          structure.\r\n *        props.shownPolygons: The list of polygons currently being displayed.\r\n *        props.togglePolygon: A function that turns a polygon on or off.\r\n * @returns {JSX.Element}\r\n */\r\nexport const ExplorerTree = (props) => {\r\n  return (\r\n    <div>\r\n      <div className=\"card-header\">{props.extraction.Name}</div>\r\n      <div style={{ height: `calc(100vh - 200px)`, overflowY: \"auto\" }}>\r\n        <ExplorerList\r\n          listClasses={[\"list-group\", \"list-group-flush\"]}\r\n          Children={props.extraction.Children}\r\n          extractType={props.extraction.ExtractType}\r\n          togglePolygon={props.togglePolygon}\r\n          shownPolygons={props.shownPolygons}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}