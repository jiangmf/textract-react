{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { streamCollector } from \"@aws-sdk/fetch-http-handler\";\nimport { toBase64 } from \"@aws-sdk/util-base64-browser\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { toUtf8 } from \"@aws-sdk/util-utf8-browser\";\nvar ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = \"The stream has already been transformed.\";\nexport var sdkStreamMixin = function (stream) {\n  var _a, _b;\n\n  if (!isBlobInstance(stream) && !isReadableStreamInstance(stream)) {\n    var name_1 = ((_b = (_a = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) || stream;\n    throw new Error(\"Unexpected stream implementation, expect Blob or ReadableStream, got \".concat(name_1));\n  }\n\n  var transformed = false;\n\n  var transformToByteArray = function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (transformed) {\n              throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n            }\n\n            transformed = true;\n            return [4, streamCollector(stream)];\n\n          case 1:\n            return [2, _a.sent()];\n        }\n      });\n    });\n  };\n\n  var blobToWebStream = function (blob) {\n    if (typeof blob.stream !== \"function\") {\n      throw new Error(\"Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\\n\" + \"If you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body\");\n    }\n\n    return blob.stream();\n  };\n\n  return Object.assign(stream, {\n    transformToByteArray: transformToByteArray,\n    transformToString: function (encoding) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var buf;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4, transformToByteArray()];\n\n            case 1:\n              buf = _a.sent();\n\n              if (encoding === \"base64\") {\n                return [2, toBase64(buf)];\n              } else if (encoding === \"hex\") {\n                return [2, toHex(buf)];\n              } else if (encoding === undefined || encoding === \"utf8\" || encoding === \"utf-8\") {\n                return [2, toUtf8(buf)];\n              } else if (typeof TextDecoder === \"function\") {\n                return [2, new TextDecoder(encoding).decode(buf)];\n              } else {\n                throw new Error(\"TextDecoder is not available, please make sure polyfill is provided.\");\n              }\n\n              return [2];\n          }\n        });\n      });\n    },\n    transformToWebStream: function () {\n      if (transformed) {\n        throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n      }\n\n      transformed = true;\n\n      if (isBlobInstance(stream)) {\n        return blobToWebStream(stream);\n      } else if (isReadableStreamInstance(stream)) {\n        return stream;\n      } else {\n        throw new Error(\"Cannot transform payload to web stream, got \".concat(stream));\n      }\n    }\n  });\n};\n\nvar isBlobInstance = function (stream) {\n  return typeof Blob === \"function\" && stream instanceof Blob;\n};\n\nvar isReadableStreamInstance = function (stream) {\n  return typeof ReadableStream === \"function\" && stream instanceof ReadableStream;\n};","map":{"version":3,"names":["__awaiter","__generator","streamCollector","toBase64","toHex","toUtf8","ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED","sdkStreamMixin","stream","_a","_b","isBlobInstance","isReadableStreamInstance","name_1","__proto__","constructor","name","Error","concat","transformed","transformToByteArray","label","sent","blobToWebStream","blob","Object","assign","transformToString","encoding","buf","undefined","TextDecoder","decode","transformToWebStream","Blob","ReadableStream"],"sources":["C:/Users/icean/aws-doc-sdk-examples/javascriptv3/example_code/cross-services/textract-react/node_modules/@aws-sdk/util-stream-browser/dist-es/sdk-stream-mixin.js"],"sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport { streamCollector } from \"@aws-sdk/fetch-http-handler\";\nimport { toBase64 } from \"@aws-sdk/util-base64-browser\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { toUtf8 } from \"@aws-sdk/util-utf8-browser\";\nvar ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = \"The stream has already been transformed.\";\nexport var sdkStreamMixin = function (stream) {\n    var _a, _b;\n    if (!isBlobInstance(stream) && !isReadableStreamInstance(stream)) {\n        var name_1 = ((_b = (_a = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) || stream;\n        throw new Error(\"Unexpected stream implementation, expect Blob or ReadableStream, got \".concat(name_1));\n    }\n    var transformed = false;\n    var transformToByteArray = function () { return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (transformed) {\n                        throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n                    }\n                    transformed = true;\n                    return [4, streamCollector(stream)];\n                case 1: return [2, _a.sent()];\n            }\n        });\n    }); };\n    var blobToWebStream = function (blob) {\n        if (typeof blob.stream !== \"function\") {\n            throw new Error(\"Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\\n\" +\n                \"If you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body\");\n        }\n        return blob.stream();\n    };\n    return Object.assign(stream, {\n        transformToByteArray: transformToByteArray,\n        transformToString: function (encoding) { return __awaiter(void 0, void 0, void 0, function () {\n            var buf;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4, transformToByteArray()];\n                    case 1:\n                        buf = _a.sent();\n                        if (encoding === \"base64\") {\n                            return [2, toBase64(buf)];\n                        }\n                        else if (encoding === \"hex\") {\n                            return [2, toHex(buf)];\n                        }\n                        else if (encoding === undefined || encoding === \"utf8\" || encoding === \"utf-8\") {\n                            return [2, toUtf8(buf)];\n                        }\n                        else if (typeof TextDecoder === \"function\") {\n                            return [2, new TextDecoder(encoding).decode(buf)];\n                        }\n                        else {\n                            throw new Error(\"TextDecoder is not available, please make sure polyfill is provided.\");\n                        }\n                        return [2];\n                }\n            });\n        }); },\n        transformToWebStream: function () {\n            if (transformed) {\n                throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n            }\n            transformed = true;\n            if (isBlobInstance(stream)) {\n                return blobToWebStream(stream);\n            }\n            else if (isReadableStreamInstance(stream)) {\n                return stream;\n            }\n            else {\n                throw new Error(\"Cannot transform payload to web stream, got \".concat(stream));\n            }\n        },\n    });\n};\nvar isBlobInstance = function (stream) { return typeof Blob === \"function\" && stream instanceof Blob; };\nvar isReadableStreamInstance = function (stream) {\n    return typeof ReadableStream === \"function\" && stream instanceof ReadableStream;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}