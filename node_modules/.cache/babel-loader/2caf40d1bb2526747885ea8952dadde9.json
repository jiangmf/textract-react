{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { getChecksumAlgorithmForRequest } from \"./getChecksumAlgorithmForRequest\";\nimport { getChecksumLocationName } from \"./getChecksumLocationName\";\nimport { hasHeader } from \"./hasHeader\";\nimport { isStreaming } from \"./isStreaming\";\nimport { selectChecksumAlgorithmFunction } from \"./selectChecksumAlgorithmFunction\";\nimport { stringHasher } from \"./stringHasher\";\nimport { validateChecksumFromResponse } from \"./validateChecksumFromResponse\";\nexport var flexibleChecksumsMiddleware = function (config, middlewareConfig) {\n  return function (next) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var request, requestBody, headers, base64Encoder, streamHasher, input, requestChecksumRequired, requestAlgorithmMember, checksumAlgorithm, updatedBody, updatedHeaders, checksumLocationName, checksumAlgorithmFn, getAwsChunkedEncodingStream, bodyLengthChecker, rawChecksum, result, requestValidationModeMember, responseAlgorithms;\n\n        var _a;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              if (!HttpRequest.isInstance(args.request)) {\n                return [2, next(args)];\n              }\n\n              request = args.request;\n              requestBody = request.body, headers = request.headers;\n              base64Encoder = config.base64Encoder, streamHasher = config.streamHasher;\n              input = middlewareConfig.input, requestChecksumRequired = middlewareConfig.requestChecksumRequired, requestAlgorithmMember = middlewareConfig.requestAlgorithmMember;\n              checksumAlgorithm = getChecksumAlgorithmForRequest(input, {\n                requestChecksumRequired: requestChecksumRequired,\n                requestAlgorithmMember: requestAlgorithmMember\n              });\n              updatedBody = requestBody;\n              updatedHeaders = headers;\n              if (!checksumAlgorithm) return [3, 3];\n              checksumLocationName = getChecksumLocationName(checksumAlgorithm);\n              checksumAlgorithmFn = selectChecksumAlgorithmFunction(checksumAlgorithm, config);\n              if (!isStreaming(requestBody)) return [3, 1];\n              getAwsChunkedEncodingStream = config.getAwsChunkedEncodingStream, bodyLengthChecker = config.bodyLengthChecker;\n              updatedBody = getAwsChunkedEncodingStream(requestBody, {\n                base64Encoder: base64Encoder,\n                bodyLengthChecker: bodyLengthChecker,\n                checksumLocationName: checksumLocationName,\n                checksumAlgorithmFn: checksumAlgorithmFn,\n                streamHasher: streamHasher\n              });\n              updatedHeaders = __assign(__assign({}, headers), {\n                \"content-encoding\": \"aws-chunked\",\n                \"transfer-encoding\": \"chunked\",\n                \"x-amz-decoded-content-length\": headers[\"content-length\"],\n                \"x-amz-content-sha256\": \"STREAMING-UNSIGNED-PAYLOAD-TRAILER\",\n                \"x-amz-trailer\": checksumLocationName\n              });\n              delete updatedHeaders[\"content-length\"];\n              return [3, 3];\n\n            case 1:\n              if (!!hasHeader(checksumLocationName, headers)) return [3, 3];\n              return [4, stringHasher(checksumAlgorithmFn, requestBody)];\n\n            case 2:\n              rawChecksum = _b.sent();\n              updatedHeaders = __assign(__assign({}, headers), (_a = {}, _a[checksumLocationName] = base64Encoder(rawChecksum), _a));\n              _b.label = 3;\n\n            case 3:\n              return [4, next(__assign(__assign({}, args), {\n                request: __assign(__assign({}, request), {\n                  headers: updatedHeaders,\n                  body: updatedBody\n                })\n              }))];\n\n            case 4:\n              result = _b.sent();\n              requestValidationModeMember = middlewareConfig.requestValidationModeMember, responseAlgorithms = middlewareConfig.responseAlgorithms;\n\n              if (requestValidationModeMember && input[requestValidationModeMember] === \"ENABLED\") {\n                validateChecksumFromResponse(result.response, {\n                  config: config,\n                  responseAlgorithms: responseAlgorithms\n                });\n              }\n\n              return [2, result];\n          }\n        });\n      });\n    };\n  };\n};","map":{"version":3,"names":["__assign","__awaiter","__generator","HttpRequest","getChecksumAlgorithmForRequest","getChecksumLocationName","hasHeader","isStreaming","selectChecksumAlgorithmFunction","stringHasher","validateChecksumFromResponse","flexibleChecksumsMiddleware","config","middlewareConfig","next","args","request","requestBody","headers","base64Encoder","streamHasher","input","requestChecksumRequired","requestAlgorithmMember","checksumAlgorithm","updatedBody","updatedHeaders","checksumLocationName","checksumAlgorithmFn","getAwsChunkedEncodingStream","bodyLengthChecker","rawChecksum","result","requestValidationModeMember","responseAlgorithms","_a","_b","label","isInstance","body","sent","response"],"sources":["C:/Users/icean/aws-doc-sdk-examples/javascriptv3/example_code/cross-services/textract-react/node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/flexibleChecksumsMiddleware.js"],"sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { getChecksumAlgorithmForRequest } from \"./getChecksumAlgorithmForRequest\";\nimport { getChecksumLocationName } from \"./getChecksumLocationName\";\nimport { hasHeader } from \"./hasHeader\";\nimport { isStreaming } from \"./isStreaming\";\nimport { selectChecksumAlgorithmFunction } from \"./selectChecksumAlgorithmFunction\";\nimport { stringHasher } from \"./stringHasher\";\nimport { validateChecksumFromResponse } from \"./validateChecksumFromResponse\";\nexport var flexibleChecksumsMiddleware = function (config, middlewareConfig) {\n    return function (next) {\n        return function (args) { return __awaiter(void 0, void 0, void 0, function () {\n            var request, requestBody, headers, base64Encoder, streamHasher, input, requestChecksumRequired, requestAlgorithmMember, checksumAlgorithm, updatedBody, updatedHeaders, checksumLocationName, checksumAlgorithmFn, getAwsChunkedEncodingStream, bodyLengthChecker, rawChecksum, result, requestValidationModeMember, responseAlgorithms;\n            var _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!HttpRequest.isInstance(args.request)) {\n                            return [2, next(args)];\n                        }\n                        request = args.request;\n                        requestBody = request.body, headers = request.headers;\n                        base64Encoder = config.base64Encoder, streamHasher = config.streamHasher;\n                        input = middlewareConfig.input, requestChecksumRequired = middlewareConfig.requestChecksumRequired, requestAlgorithmMember = middlewareConfig.requestAlgorithmMember;\n                        checksumAlgorithm = getChecksumAlgorithmForRequest(input, {\n                            requestChecksumRequired: requestChecksumRequired,\n                            requestAlgorithmMember: requestAlgorithmMember,\n                        });\n                        updatedBody = requestBody;\n                        updatedHeaders = headers;\n                        if (!checksumAlgorithm) return [3, 3];\n                        checksumLocationName = getChecksumLocationName(checksumAlgorithm);\n                        checksumAlgorithmFn = selectChecksumAlgorithmFunction(checksumAlgorithm, config);\n                        if (!isStreaming(requestBody)) return [3, 1];\n                        getAwsChunkedEncodingStream = config.getAwsChunkedEncodingStream, bodyLengthChecker = config.bodyLengthChecker;\n                        updatedBody = getAwsChunkedEncodingStream(requestBody, {\n                            base64Encoder: base64Encoder,\n                            bodyLengthChecker: bodyLengthChecker,\n                            checksumLocationName: checksumLocationName,\n                            checksumAlgorithmFn: checksumAlgorithmFn,\n                            streamHasher: streamHasher,\n                        });\n                        updatedHeaders = __assign(__assign({}, headers), { \"content-encoding\": \"aws-chunked\", \"transfer-encoding\": \"chunked\", \"x-amz-decoded-content-length\": headers[\"content-length\"], \"x-amz-content-sha256\": \"STREAMING-UNSIGNED-PAYLOAD-TRAILER\", \"x-amz-trailer\": checksumLocationName });\n                        delete updatedHeaders[\"content-length\"];\n                        return [3, 3];\n                    case 1:\n                        if (!!hasHeader(checksumLocationName, headers)) return [3, 3];\n                        return [4, stringHasher(checksumAlgorithmFn, requestBody)];\n                    case 2:\n                        rawChecksum = _b.sent();\n                        updatedHeaders = __assign(__assign({}, headers), (_a = {}, _a[checksumLocationName] = base64Encoder(rawChecksum), _a));\n                        _b.label = 3;\n                    case 3: return [4, next(__assign(__assign({}, args), { request: __assign(__assign({}, request), { headers: updatedHeaders, body: updatedBody }) }))];\n                    case 4:\n                        result = _b.sent();\n                        requestValidationModeMember = middlewareConfig.requestValidationModeMember, responseAlgorithms = middlewareConfig.responseAlgorithms;\n                        if (requestValidationModeMember && input[requestValidationModeMember] === \"ENABLED\") {\n                            validateChecksumFromResponse(result.response, {\n                                config: config,\n                                responseAlgorithms: responseAlgorithms,\n                            });\n                        }\n                        return [2, result];\n                }\n            });\n        }); };\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}