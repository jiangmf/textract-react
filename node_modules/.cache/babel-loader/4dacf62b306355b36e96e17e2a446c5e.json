{"ast":null,"code":"import { __assign, __awaiter, __generator, __values } from \"tslib\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\nexport var sendMessageBatchMiddleware = function (options) {\n  return function (next) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var resp, output, messageIds, entries, _a, _b, entry, _c, _d, entry, md5, hash, _e, _f, e_1_1;\n\n        var e_2, _g, e_1, _h;\n\n        return __generator(this, function (_j) {\n          switch (_j.label) {\n            case 0:\n              return [4, next(__assign({}, args))];\n\n            case 1:\n              resp = _j.sent();\n              output = resp.output;\n              messageIds = [];\n              entries = {};\n\n              if (output.Successful !== undefined) {\n                try {\n                  for (_a = __values(output.Successful), _b = _a.next(); !_b.done; _b = _a.next()) {\n                    entry = _b.value;\n\n                    if (entry.Id !== undefined) {\n                      entries[entry.Id] = entry;\n                    }\n                  }\n                } catch (e_2_1) {\n                  e_2 = {\n                    error: e_2_1\n                  };\n                } finally {\n                  try {\n                    if (_b && !_b.done && (_g = _a.return)) _g.call(_a);\n                  } finally {\n                    if (e_2) throw e_2.error;\n                  }\n                }\n              }\n\n              _j.label = 2;\n\n            case 2:\n              _j.trys.push([2, 7, 8, 9]);\n\n              _c = __values(args.input.Entries), _d = _c.next();\n              _j.label = 3;\n\n            case 3:\n              if (!!_d.done) return [3, 6];\n              entry = _d.value;\n              if (!entries[entry.Id]) return [3, 5];\n              md5 = entries[entry.Id].MD5OfMessageBody;\n              hash = new options.md5();\n              hash.update(entry.MessageBody || \"\");\n              _e = md5;\n              _f = toHex;\n              return [4, hash.digest()];\n\n            case 4:\n              if (_e !== _f.apply(void 0, [_j.sent()])) {\n                messageIds.push(entries[entry.Id].MessageId);\n              }\n\n              _j.label = 5;\n\n            case 5:\n              _d = _c.next();\n              return [3, 3];\n\n            case 6:\n              return [3, 9];\n\n            case 7:\n              e_1_1 = _j.sent();\n              e_1 = {\n                error: e_1_1\n              };\n              return [3, 9];\n\n            case 8:\n              try {\n                if (_d && !_d.done && (_h = _c.return)) _h.call(_c);\n              } finally {\n                if (e_1) throw e_1.error;\n              }\n\n              return [7];\n\n            case 9:\n              if (messageIds.length > 0) {\n                throw new Error(\"Invalid MD5 checksum on messages: \" + messageIds.join(\", \"));\n              }\n\n              return [2, resp];\n          }\n        });\n      });\n    };\n  };\n};\nexport var sendMessageBatchMiddlewareOptions = {\n  step: \"initialize\",\n  tags: [\"VALIDATE_BODY_MD5\"],\n  name: \"sendMessageBatchMiddleware\",\n  override: true\n};\nexport var getSendMessageBatchPlugin = function (config) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(sendMessageBatchMiddleware(config), sendMessageBatchMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"names":["__assign","__awaiter","__generator","__values","toHex","sendMessageBatchMiddleware","options","next","args","resp","output","messageIds","entries","_a","_b","entry","_c","_d","md5","hash","_e","_f","e_1_1","e_2","_g","e_1","_h","_j","label","sent","Successful","undefined","done","value","Id","e_2_1","error","return","call","trys","push","input","Entries","MD5OfMessageBody","update","MessageBody","digest","apply","MessageId","length","Error","join","sendMessageBatchMiddlewareOptions","step","tags","name","override","getSendMessageBatchPlugin","config","applyToStack","clientStack","add"],"sources":["C:/Users/icean/aws-doc-sdk-examples/javascriptv3/example_code/cross-services/textract-react/node_modules/@aws-sdk/middleware-sdk-sqs/dist-es/send-message-batch.js"],"sourcesContent":["import { __assign, __awaiter, __generator, __values } from \"tslib\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\nexport var sendMessageBatchMiddleware = function (options) {\n    return function (next) {\n        return function (args) { return __awaiter(void 0, void 0, void 0, function () {\n            var resp, output, messageIds, entries, _a, _b, entry, _c, _d, entry, md5, hash, _e, _f, e_1_1;\n            var e_2, _g, e_1, _h;\n            return __generator(this, function (_j) {\n                switch (_j.label) {\n                    case 0: return [4, next(__assign({}, args))];\n                    case 1:\n                        resp = _j.sent();\n                        output = resp.output;\n                        messageIds = [];\n                        entries = {};\n                        if (output.Successful !== undefined) {\n                            try {\n                                for (_a = __values(output.Successful), _b = _a.next(); !_b.done; _b = _a.next()) {\n                                    entry = _b.value;\n                                    if (entry.Id !== undefined) {\n                                        entries[entry.Id] = entry;\n                                    }\n                                }\n                            }\n                            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                            finally {\n                                try {\n                                    if (_b && !_b.done && (_g = _a.return)) _g.call(_a);\n                                }\n                                finally { if (e_2) throw e_2.error; }\n                            }\n                        }\n                        _j.label = 2;\n                    case 2:\n                        _j.trys.push([2, 7, 8, 9]);\n                        _c = __values(args.input.Entries), _d = _c.next();\n                        _j.label = 3;\n                    case 3:\n                        if (!!_d.done) return [3, 6];\n                        entry = _d.value;\n                        if (!entries[entry.Id]) return [3, 5];\n                        md5 = entries[entry.Id].MD5OfMessageBody;\n                        hash = new options.md5();\n                        hash.update(entry.MessageBody || \"\");\n                        _e = md5;\n                        _f = toHex;\n                        return [4, hash.digest()];\n                    case 4:\n                        if (_e !== _f.apply(void 0, [_j.sent()])) {\n                            messageIds.push(entries[entry.Id].MessageId);\n                        }\n                        _j.label = 5;\n                    case 5:\n                        _d = _c.next();\n                        return [3, 3];\n                    case 6: return [3, 9];\n                    case 7:\n                        e_1_1 = _j.sent();\n                        e_1 = { error: e_1_1 };\n                        return [3, 9];\n                    case 8:\n                        try {\n                            if (_d && !_d.done && (_h = _c.return)) _h.call(_c);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                        return [7];\n                    case 9:\n                        if (messageIds.length > 0) {\n                            throw new Error(\"Invalid MD5 checksum on messages: \" + messageIds.join(\", \"));\n                        }\n                        return [2, resp];\n                }\n            });\n        }); };\n    };\n};\nexport var sendMessageBatchMiddlewareOptions = {\n    step: \"initialize\",\n    tags: [\"VALIDATE_BODY_MD5\"],\n    name: \"sendMessageBatchMiddleware\",\n    override: true,\n};\nexport var getSendMessageBatchPlugin = function (config) { return ({\n    applyToStack: function (clientStack) {\n        clientStack.add(sendMessageBatchMiddleware(config), sendMessageBatchMiddlewareOptions);\n    },\n}); };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}