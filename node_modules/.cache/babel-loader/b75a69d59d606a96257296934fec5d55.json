{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sha1 = void 0;\n\nvar util_utf8_browser_1 = require(\"@aws-sdk/util-utf8-browser\");\n\nvar isEmptyData_1 = require(\"./isEmptyData\");\n\nvar constants_1 = require(\"./constants\");\n\nvar util_locate_window_1 = require(\"@aws-sdk/util-locate-window\");\n\nvar Sha1 =\n/** @class */\nfunction () {\n  function Sha1(secret) {\n    this.toHash = new Uint8Array(0);\n\n    if (secret !== void 0) {\n      this.key = new Promise(function (resolve, reject) {\n        (0, util_locate_window_1.locateWindow)().crypto.subtle.importKey(\"raw\", convertToBuffer(secret), constants_1.SHA_1_HMAC_ALGO, false, [\"sign\"]).then(resolve, reject);\n      });\n      this.key.catch(function () {});\n    }\n  }\n\n  Sha1.prototype.update = function (data) {\n    if ((0, isEmptyData_1.isEmptyData)(data)) {\n      return;\n    }\n\n    var update = convertToBuffer(data);\n    var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);\n    typedArray.set(this.toHash, 0);\n    typedArray.set(update, this.toHash.byteLength);\n    this.toHash = typedArray;\n  };\n\n  Sha1.prototype.digest = function () {\n    var _this = this;\n\n    if (this.key) {\n      return this.key.then(function (key) {\n        return (0, util_locate_window_1.locateWindow)().crypto.subtle.sign(constants_1.SHA_1_HMAC_ALGO, key, _this.toHash).then(function (data) {\n          return new Uint8Array(data);\n        });\n      });\n    }\n\n    if ((0, isEmptyData_1.isEmptyData)(this.toHash)) {\n      return Promise.resolve(constants_1.EMPTY_DATA_SHA_1);\n    }\n\n    return Promise.resolve().then(function () {\n      return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_1_HASH, _this.toHash);\n    }).then(function (data) {\n      return Promise.resolve(new Uint8Array(data));\n    });\n  };\n\n  return Sha1;\n}();\n\nexports.Sha1 = Sha1;\n\nfunction convertToBuffer(data) {\n  if (typeof data === \"string\") {\n    return (0, util_utf8_browser_1.fromUtf8)(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n  }\n\n  return new Uint8Array(data);\n}","map":{"version":3,"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AAEA;AAAA;AAAA;EAIE,cAAYA,MAAZ,EAA+B;IAFvB,cAAqB,IAAIC,UAAJ,CAAe,CAAf,CAArB;;IAGN,IAAID,MAAM,KAAK,KAAK,CAApB,EAAuB;MACrB,KAAKE,GAAL,GAAW,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;QACrC,yCACGC,MADH,CACUC,MADV,CACiBC,SADjB,CAEI,KAFJ,EAGIC,eAAe,CAACT,MAAD,CAHnB,EAIIU,2BAJJ,EAKI,KALJ,EAMI,CAAC,MAAD,CANJ,EAQGC,IARH,CAQQP,OARR,EAQiBC,MARjB;MASD,CAVU,CAAX;MAWA,KAAKH,GAAL,CAASU,KAAT,CAAe,aAAQ,CAAvB;IACD;EACF;;EAEDC,kCAAOC,IAAP,EAAuB;IACrB,IAAI,+BAAYA,IAAZ,CAAJ,EAAuB;MACrB;IACD;;IAED,IAAMC,MAAM,GAAGN,eAAe,CAACK,IAAD,CAA9B;IACA,IAAME,UAAU,GAAG,IAAIf,UAAJ,CACjB,KAAKgB,MAAL,CAAYC,UAAZ,GAAyBH,MAAM,CAACG,UADf,CAAnB;IAGAF,UAAU,CAACG,GAAX,CAAe,KAAKF,MAApB,EAA4B,CAA5B;IACAD,UAAU,CAACG,GAAX,CAAeJ,MAAf,EAAuB,KAAKE,MAAL,CAAYC,UAAnC;IACA,KAAKD,MAAL,GAAcD,UAAd;EACD,CAZD;;EAcAH;IAAA;;IACE,IAAI,KAAKX,GAAT,EAAc;MACZ,OAAO,KAAKA,GAAL,CAASS,IAAT,CAAc,UAACT,GAAD,EAAI;QACvB,gDACGI,MADH,CACUC,MADV,CACiBa,IADjB,CACsBV,2BADtB,EACuCR,GADvC,EAC4CmB,KAAI,CAACJ,MADjD,EAEGN,IAFH,CAEQ,UAACG,IAAD,EAAK;UAAK,WAAIb,UAAJ,CAAea,IAAf;QAAoB,CAFtC;MAEuC,CAHlC,CAAP;IAKD;;IAED,IAAI,+BAAY,KAAKG,MAAjB,CAAJ,EAA8B;MAC5B,OAAOd,OAAO,CAACC,OAAR,CAAgBM,4BAAhB,CAAP;IACD;;IAED,OAAOP,OAAO,CAACC,OAAR,GACJO,IADI,CACC;MAAM,gDAAeL,MAAf,CAAsBC,MAAtB,CAA6Be,MAA7B,CAAoCZ,sBAApC,EAAgDW,KAAI,CAACJ,MAArD;IAA4D,CADnE,EAEJN,IAFI,CAEC,UAACG,IAAD,EAAK;MAAK,cAAO,CAACV,OAAR,CAAgB,IAAIH,UAAJ,CAAea,IAAf,CAAhB;IAAqC,CAFhD,CAAP;EAGD,CAhBD;;EAiBF;AAAC,CApDD;;AAAaS;;AAsDb,SAASd,eAAT,CAAyBK,IAAzB,EAAyC;EACvC,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;IAC5B,OAAO,kCAASA,IAAT,CAAP;EACD;;EAED,IAAIU,WAAW,CAACC,MAAZ,CAAmBX,IAAnB,CAAJ,EAA8B;IAC5B,OAAO,IAAIb,UAAJ,CACLa,IAAI,CAACY,MADA,EAELZ,IAAI,CAACa,UAFA,EAGLb,IAAI,CAACI,UAAL,GAAkBjB,UAAU,CAAC2B,iBAHxB,CAAP;EAKD;;EAED,OAAO,IAAI3B,UAAJ,CAAea,IAAf,CAAP;AACD","names":["secret","Uint8Array","key","Promise","resolve","reject","crypto","subtle","importKey","convertToBuffer","constants_1","then","catch","Sha1","data","update","typedArray","toHash","byteLength","set","sign","_this","digest","exports","ArrayBuffer","isView","buffer","byteOffset","BYTES_PER_ELEMENT"],"sourceRoot":"","sources":["../src/webCryptoSha1.ts"],"sourcesContent":["import { Hash, SourceData } from \"@aws-sdk/types\";\nimport { fromUtf8 } from \"@aws-sdk/util-utf8-browser\";\nimport { isEmptyData } from \"./isEmptyData\";\nimport { EMPTY_DATA_SHA_1, SHA_1_HASH, SHA_1_HMAC_ALGO } from \"./constants\";\nimport { locateWindow } from \"@aws-sdk/util-locate-window\";\n\nexport class Sha1 implements Hash {\n  private readonly key: Promise<CryptoKey> | undefined;\n  private toHash: Uint8Array = new Uint8Array(0);\n\n  constructor(secret?: SourceData) {\n    if (secret !== void 0) {\n      this.key = new Promise((resolve, reject) => {\n        locateWindow()\n          .crypto.subtle.importKey(\n            \"raw\",\n            convertToBuffer(secret),\n            SHA_1_HMAC_ALGO,\n            false,\n            [\"sign\"]\n          )\n          .then(resolve, reject);\n      });\n      this.key.catch(() => {});\n    }\n  }\n\n  update(data: SourceData): void {\n    if (isEmptyData(data)) {\n      return;\n    }\n\n    const update = convertToBuffer(data);\n    const typedArray = new Uint8Array(\n      this.toHash.byteLength + update.byteLength\n    );\n    typedArray.set(this.toHash, 0);\n    typedArray.set(update, this.toHash.byteLength);\n    this.toHash = typedArray;\n  }\n\n  digest(): Promise<Uint8Array> {\n    if (this.key) {\n      return this.key.then((key) =>\n        locateWindow()\n          .crypto.subtle.sign(SHA_1_HMAC_ALGO, key, this.toHash)\n          .then((data) => new Uint8Array(data))\n      );\n    }\n\n    if (isEmptyData(this.toHash)) {\n      return Promise.resolve(EMPTY_DATA_SHA_1);\n    }\n\n    return Promise.resolve()\n      .then(() => locateWindow().crypto.subtle.digest(SHA_1_HASH, this.toHash))\n      .then((data) => Promise.resolve(new Uint8Array(data)));\n  }\n}\n\nfunction convertToBuffer(data: SourceData): Uint8Array {\n  if (typeof data === \"string\") {\n    return fromUtf8(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(\n      data.buffer,\n      data.byteOffset,\n      data.byteLength / Uint8Array.BYTES_PER_ELEMENT\n    );\n  }\n\n  return new Uint8Array(data);\n}\n"]},"metadata":{},"sourceType":"script"}