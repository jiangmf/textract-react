{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\icean\\\\aws-doc-sdk-examples\\\\javascriptv3\\\\example_code\\\\cross-services\\\\textract-react\\\\src\\\\ImageDisplay.js\",\n    _s = $RefreshSig$();\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef, useLayoutEffect } from \"react\";\nimport { ColorMap } from \"./Utils\";\n/**\r\n * Displays a PNG image formatted as a Base64 string and draws polygons on top of\r\n * the image to show the location of bounding polygons associated with Amazon Textract\r\n * items.\r\n *\r\n * @param props: Properties that determine how the image is displayed.\r\n *        props.imageData: The image data as a Base64 string.\r\n *        props.shownPolygons: The list of polygons to draw over the image. Polygons\r\n *                             are drawn on a canvas element placed over the image.\r\n * @returns {JSX.Element}\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ImageDisplay = props => {\n  _s();\n\n  const imgRef = useRef();\n  const canvasRef = useRef();\n  useLayoutEffect(() => {\n    const positionCanvas = event => {\n      const canvas = canvasRef.current;\n      const img = imgRef.current;\n\n      if (img) {\n        // Update the canvas position to match that of the image.\n        canvas.style.position = \"absolute\";\n        canvas.style.left = img.offsetLeft + \"px\";\n        canvas.style.top = img.offsetTop + \"px\";\n        canvas.width = img.offsetWidth;\n        canvas.height = img.offsetHeight; // Polygon points are defined as fractions of the total height and width of\n        // the image.\n\n        const context = canvas.getContext(\"2d\");\n        props.shownPolygons.forEach(poly => {\n          context.strokeStyle = ColorMap[poly.BlockType];\n          context.lineWidth = 2;\n          const points = poly.Geometry.Polygon;\n          context.beginPath();\n          context.moveTo(canvas.width * points[0].X, canvas.height * points[0].Y);\n          points.slice(1).forEach(point => context.lineTo(canvas.width * point.X, canvas.height * point.Y));\n          context.closePath();\n          context.stroke();\n        });\n      }\n    };\n\n    window.addEventListener(\"resize\", positionCanvas);\n    positionCanvas();\n    return () => window.removeEventListener(\"resize\", positionCanvas);\n  }, [props.shownPolygons]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      ref: imgRef,\n      src: \"data:image/png;base64,\" + props.imageData,\n      className: \"img-fluid\",\n      alt: \"Extraction source\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ImageDisplay, \"iwpmPHABZpcgXfTm/cCBc6WTORY=\");\n\n_c = ImageDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageDisplay\");","map":{"version":3,"names":["React","useRef","useLayoutEffect","ColorMap","ImageDisplay","props","imgRef","canvasRef","positionCanvas","event","canvas","current","img","style","position","left","offsetLeft","top","offsetTop","width","offsetWidth","height","offsetHeight","context","getContext","shownPolygons","forEach","poly","strokeStyle","BlockType","lineWidth","points","Geometry","Polygon","beginPath","moveTo","X","Y","slice","point","lineTo","closePath","stroke","window","addEventListener","removeEventListener","imageData"],"sources":["C:/Users/icean/aws-doc-sdk-examples/javascriptv3/example_code/cross-services/textract-react/src/ImageDisplay.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport React, { useRef, useLayoutEffect } from \"react\";\r\nimport { ColorMap } from \"./Utils\";\r\n\r\n/**\r\n * Displays a PNG image formatted as a Base64 string and draws polygons on top of\r\n * the image to show the location of bounding polygons associated with Amazon Textract\r\n * items.\r\n *\r\n * @param props: Properties that determine how the image is displayed.\r\n *        props.imageData: The image data as a Base64 string.\r\n *        props.shownPolygons: The list of polygons to draw over the image. Polygons\r\n *                             are drawn on a canvas element placed over the image.\r\n * @returns {JSX.Element}\r\n */\r\nexport const ImageDisplay = (props) => {\r\n  const imgRef = useRef();\r\n  const canvasRef = useRef();\r\n\r\n  useLayoutEffect(() => {\r\n    const positionCanvas = (event) => {\r\n      const canvas = canvasRef.current;\r\n      const img = imgRef.current;\r\n      if (img) {\r\n        // Update the canvas position to match that of the image.\r\n        canvas.style.position = \"absolute\";\r\n        canvas.style.left = img.offsetLeft + \"px\";\r\n        canvas.style.top = img.offsetTop + \"px\";\r\n        canvas.width = img.offsetWidth;\r\n        canvas.height = img.offsetHeight;\r\n\r\n        // Polygon points are defined as fractions of the total height and width of\r\n        // the image.\r\n        const context = canvas.getContext(\"2d\");\r\n        props.shownPolygons.forEach((poly) => {\r\n          context.strokeStyle = ColorMap[poly.BlockType];\r\n          context.lineWidth = 2;\r\n          const points = poly.Geometry.Polygon;\r\n          context.beginPath();\r\n          context.moveTo(\r\n            canvas.width * points[0].X,\r\n            canvas.height * points[0].Y\r\n          );\r\n          points\r\n            .slice(1)\r\n            .forEach((point) =>\r\n              context.lineTo(canvas.width * point.X, canvas.height * point.Y)\r\n            );\r\n          context.closePath();\r\n          context.stroke();\r\n        });\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"resize\", positionCanvas);\r\n    positionCanvas();\r\n    return () => window.removeEventListener(\"resize\", positionCanvas);\r\n  }, [props.shownPolygons]);\r\n\r\n  return (\r\n    <div>\r\n      <img\r\n        ref={imgRef}\r\n        src={\"data:image/png;base64,\" + props.imageData}\r\n        className=\"img-fluid\"\r\n        alt=\"Extraction source\"\r\n      />\r\n      <canvas ref={canvasRef} />\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,eAAxB,QAA+C,OAA/C;AACA,SAASC,QAAT,QAAyB,SAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,YAAY,GAAIC,KAAD,IAAW;EAAA;;EACrC,MAAMC,MAAM,GAAGL,MAAM,EAArB;EACA,MAAMM,SAAS,GAAGN,MAAM,EAAxB;EAEAC,eAAe,CAAC,MAAM;IACpB,MAAMM,cAAc,GAAIC,KAAD,IAAW;MAChC,MAAMC,MAAM,GAAGH,SAAS,CAACI,OAAzB;MACA,MAAMC,GAAG,GAAGN,MAAM,CAACK,OAAnB;;MACA,IAAIC,GAAJ,EAAS;QACP;QACAF,MAAM,CAACG,KAAP,CAAaC,QAAb,GAAwB,UAAxB;QACAJ,MAAM,CAACG,KAAP,CAAaE,IAAb,GAAoBH,GAAG,CAACI,UAAJ,GAAiB,IAArC;QACAN,MAAM,CAACG,KAAP,CAAaI,GAAb,GAAmBL,GAAG,CAACM,SAAJ,GAAgB,IAAnC;QACAR,MAAM,CAACS,KAAP,GAAeP,GAAG,CAACQ,WAAnB;QACAV,MAAM,CAACW,MAAP,GAAgBT,GAAG,CAACU,YAApB,CANO,CAQP;QACA;;QACA,MAAMC,OAAO,GAAGb,MAAM,CAACc,UAAP,CAAkB,IAAlB,CAAhB;QACAnB,KAAK,CAACoB,aAAN,CAAoBC,OAApB,CAA6BC,IAAD,IAAU;UACpCJ,OAAO,CAACK,WAAR,GAAsBzB,QAAQ,CAACwB,IAAI,CAACE,SAAN,CAA9B;UACAN,OAAO,CAACO,SAAR,GAAoB,CAApB;UACA,MAAMC,MAAM,GAAGJ,IAAI,CAACK,QAAL,CAAcC,OAA7B;UACAV,OAAO,CAACW,SAAR;UACAX,OAAO,CAACY,MAAR,CACEzB,MAAM,CAACS,KAAP,GAAeY,MAAM,CAAC,CAAD,CAAN,CAAUK,CAD3B,EAEE1B,MAAM,CAACW,MAAP,GAAgBU,MAAM,CAAC,CAAD,CAAN,CAAUM,CAF5B;UAIAN,MAAM,CACHO,KADH,CACS,CADT,EAEGZ,OAFH,CAEYa,KAAD,IACPhB,OAAO,CAACiB,MAAR,CAAe9B,MAAM,CAACS,KAAP,GAAeoB,KAAK,CAACH,CAApC,EAAuC1B,MAAM,CAACW,MAAP,GAAgBkB,KAAK,CAACF,CAA7D,CAHJ;UAKAd,OAAO,CAACkB,SAAR;UACAlB,OAAO,CAACmB,MAAR;QACD,CAhBD;MAiBD;IACF,CAhCD;;IAkCAC,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCpC,cAAlC;IACAA,cAAc;IACd,OAAO,MAAMmC,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCrC,cAArC,CAAb;EACD,CAtCc,EAsCZ,CAACH,KAAK,CAACoB,aAAP,CAtCY,CAAf;EAwCA,oBACE;IAAA,wBACE;MACE,GAAG,EAAEnB,MADP;MAEE,GAAG,EAAE,2BAA2BD,KAAK,CAACyC,SAFxC;MAGE,SAAS,EAAC,WAHZ;MAIE,GAAG,EAAC;IAJN;MAAA;MAAA;MAAA;IAAA,QADF,eAOE;MAAQ,GAAG,EAAEvC;IAAb;MAAA;MAAA;MAAA;IAAA,QAPF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAWD,CAvDM;;GAAMH,Y;;KAAAA,Y"},"metadata":{},"sourceType":"module"}