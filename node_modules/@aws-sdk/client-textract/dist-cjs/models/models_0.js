"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityDocumentFieldFilterSensitiveLog = exports.AnalyzeIDDetectionsFilterSensitiveLog = exports.NormalizedValueFilterSensitiveLog = exports.AnalyzeIDRequestFilterSensitiveLog = exports.AnalyzeExpenseResponseFilterSensitiveLog = exports.ExpenseDocumentFilterSensitiveLog = exports.LineItemGroupFilterSensitiveLog = exports.LineItemFieldsFilterSensitiveLog = exports.ExpenseFieldFilterSensitiveLog = exports.ExpenseTypeFilterSensitiveLog = exports.ExpenseDetectionFilterSensitiveLog = exports.AnalyzeExpenseRequestFilterSensitiveLog = exports.AnalyzeDocumentResponseFilterSensitiveLog = exports.HumanLoopActivationOutputFilterSensitiveLog = exports.DocumentMetadataFilterSensitiveLog = exports.BlockFilterSensitiveLog = exports.RelationshipFilterSensitiveLog = exports.GeometryFilterSensitiveLog = exports.PointFilterSensitiveLog = exports.BoundingBoxFilterSensitiveLog = exports.AnalyzeDocumentRequestFilterSensitiveLog = exports.QueriesConfigFilterSensitiveLog = exports.QueryFilterSensitiveLog = exports.HumanLoopConfigFilterSensitiveLog = exports.HumanLoopDataAttributesFilterSensitiveLog = exports.DocumentFilterSensitiveLog = exports.S3ObjectFilterSensitiveLog = exports.LimitExceededException = exports.IdempotentParameterMismatchException = exports.InvalidKMSKeyException = exports.InvalidJobIdException = exports.JobStatus = exports.ValueType = exports.UnsupportedDocumentException = exports.ThrottlingException = exports.ProvisionedThroughputExceededException = exports.InvalidS3ObjectException = exports.InvalidParameterException = exports.InternalServerError = exports.HumanLoopQuotaExceededException = exports.DocumentTooLargeException = exports.BadDocumentException = exports.TextType = exports.SelectionStatus = exports.RelationshipType = exports.EntityType = exports.BlockType = exports.ContentClassifier = exports.FeatureType = exports.AccessDeniedException = void 0;
exports.StartExpenseAnalysisResponseFilterSensitiveLog = exports.StartExpenseAnalysisRequestFilterSensitiveLog = exports.StartDocumentTextDetectionResponseFilterSensitiveLog = exports.StartDocumentTextDetectionRequestFilterSensitiveLog = exports.StartDocumentAnalysisResponseFilterSensitiveLog = exports.StartDocumentAnalysisRequestFilterSensitiveLog = exports.OutputConfigFilterSensitiveLog = exports.NotificationChannelFilterSensitiveLog = exports.GetExpenseAnalysisResponseFilterSensitiveLog = exports.GetExpenseAnalysisRequestFilterSensitiveLog = exports.GetDocumentTextDetectionResponseFilterSensitiveLog = exports.GetDocumentTextDetectionRequestFilterSensitiveLog = exports.GetDocumentAnalysisResponseFilterSensitiveLog = exports.WarningFilterSensitiveLog = exports.GetDocumentAnalysisRequestFilterSensitiveLog = exports.DocumentLocationFilterSensitiveLog = exports.DetectDocumentTextResponseFilterSensitiveLog = exports.DetectDocumentTextRequestFilterSensitiveLog = exports.AnalyzeIDResponseFilterSensitiveLog = exports.IdentityDocumentFilterSensitiveLog = void 0;
const TextractServiceException_1 = require("./TextractServiceException");
class AccessDeniedException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.AccessDeniedException = AccessDeniedException;
var FeatureType;
(function (FeatureType) {
    FeatureType["FORMS"] = "FORMS";
    FeatureType["QUERIES"] = "QUERIES";
    FeatureType["TABLES"] = "TABLES";
})(FeatureType = exports.FeatureType || (exports.FeatureType = {}));
var ContentClassifier;
(function (ContentClassifier) {
    ContentClassifier["FREE_OF_ADULT_CONTENT"] = "FreeOfAdultContent";
    ContentClassifier["FREE_OF_PERSONALLY_IDENTIFIABLE_INFORMATION"] = "FreeOfPersonallyIdentifiableInformation";
})(ContentClassifier = exports.ContentClassifier || (exports.ContentClassifier = {}));
var BlockType;
(function (BlockType) {
    BlockType["CELL"] = "CELL";
    BlockType["KEY_VALUE_SET"] = "KEY_VALUE_SET";
    BlockType["LINE"] = "LINE";
    BlockType["MERGED_CELL"] = "MERGED_CELL";
    BlockType["PAGE"] = "PAGE";
    BlockType["QUERY"] = "QUERY";
    BlockType["QUERY_RESULT"] = "QUERY_RESULT";
    BlockType["SELECTION_ELEMENT"] = "SELECTION_ELEMENT";
    BlockType["TABLE"] = "TABLE";
    BlockType["TITLE"] = "TITLE";
    BlockType["WORD"] = "WORD";
})(BlockType = exports.BlockType || (exports.BlockType = {}));
var EntityType;
(function (EntityType) {
    EntityType["COLUMN_HEADER"] = "COLUMN_HEADER";
    EntityType["KEY"] = "KEY";
    EntityType["VALUE"] = "VALUE";
})(EntityType = exports.EntityType || (exports.EntityType = {}));
var RelationshipType;
(function (RelationshipType) {
    RelationshipType["ANSWER"] = "ANSWER";
    RelationshipType["CHILD"] = "CHILD";
    RelationshipType["COMPLEX_FEATURES"] = "COMPLEX_FEATURES";
    RelationshipType["MERGED_CELL"] = "MERGED_CELL";
    RelationshipType["TITLE"] = "TITLE";
    RelationshipType["VALUE"] = "VALUE";
})(RelationshipType = exports.RelationshipType || (exports.RelationshipType = {}));
var SelectionStatus;
(function (SelectionStatus) {
    SelectionStatus["NOT_SELECTED"] = "NOT_SELECTED";
    SelectionStatus["SELECTED"] = "SELECTED";
})(SelectionStatus = exports.SelectionStatus || (exports.SelectionStatus = {}));
var TextType;
(function (TextType) {
    TextType["HANDWRITING"] = "HANDWRITING";
    TextType["PRINTED"] = "PRINTED";
})(TextType = exports.TextType || (exports.TextType = {}));
class BadDocumentException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "BadDocumentException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadDocumentException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.BadDocumentException = BadDocumentException;
class DocumentTooLargeException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "DocumentTooLargeException",
            $fault: "client",
            ...opts,
        });
        this.name = "DocumentTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DocumentTooLargeException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.DocumentTooLargeException = DocumentTooLargeException;
class HumanLoopQuotaExceededException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "HumanLoopQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "HumanLoopQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, HumanLoopQuotaExceededException.prototype);
        this.ResourceType = opts.ResourceType;
        this.QuotaCode = opts.QuotaCode;
        this.ServiceCode = opts.ServiceCode;
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.HumanLoopQuotaExceededException = HumanLoopQuotaExceededException;
class InternalServerError extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "InternalServerError",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerError";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerError.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.InternalServerError = InternalServerError;
class InvalidParameterException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.InvalidParameterException = InvalidParameterException;
class InvalidS3ObjectException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "InvalidS3ObjectException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidS3ObjectException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidS3ObjectException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.InvalidS3ObjectException = InvalidS3ObjectException;
class ProvisionedThroughputExceededException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "ProvisionedThroughputExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ProvisionedThroughputExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ProvisionedThroughputExceededException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.ProvisionedThroughputExceededException = ProvisionedThroughputExceededException;
class ThrottlingException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "server",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.ThrottlingException = ThrottlingException;
class UnsupportedDocumentException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "UnsupportedDocumentException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedDocumentException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.UnsupportedDocumentException = UnsupportedDocumentException;
var ValueType;
(function (ValueType) {
    ValueType["DATE"] = "DATE";
})(ValueType = exports.ValueType || (exports.ValueType = {}));
var JobStatus;
(function (JobStatus) {
    JobStatus["FAILED"] = "FAILED";
    JobStatus["IN_PROGRESS"] = "IN_PROGRESS";
    JobStatus["PARTIAL_SUCCESS"] = "PARTIAL_SUCCESS";
    JobStatus["SUCCEEDED"] = "SUCCEEDED";
})(JobStatus = exports.JobStatus || (exports.JobStatus = {}));
class InvalidJobIdException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "InvalidJobIdException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidJobIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidJobIdException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.InvalidJobIdException = InvalidJobIdException;
class InvalidKMSKeyException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "InvalidKMSKeyException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidKMSKeyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidKMSKeyException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.InvalidKMSKeyException = InvalidKMSKeyException;
class IdempotentParameterMismatchException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "IdempotentParameterMismatchException",
            $fault: "client",
            ...opts,
        });
        this.name = "IdempotentParameterMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IdempotentParameterMismatchException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.IdempotentParameterMismatchException = IdempotentParameterMismatchException;
class LimitExceededException extends TextractServiceException_1.TextractServiceException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
exports.LimitExceededException = LimitExceededException;
const S3ObjectFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.S3ObjectFilterSensitiveLog = S3ObjectFilterSensitiveLog;
const DocumentFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DocumentFilterSensitiveLog = DocumentFilterSensitiveLog;
const HumanLoopDataAttributesFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.HumanLoopDataAttributesFilterSensitiveLog = HumanLoopDataAttributesFilterSensitiveLog;
const HumanLoopConfigFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.HumanLoopConfigFilterSensitiveLog = HumanLoopConfigFilterSensitiveLog;
const QueryFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.QueryFilterSensitiveLog = QueryFilterSensitiveLog;
const QueriesConfigFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.QueriesConfigFilterSensitiveLog = QueriesConfigFilterSensitiveLog;
const AnalyzeDocumentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AnalyzeDocumentRequestFilterSensitiveLog = AnalyzeDocumentRequestFilterSensitiveLog;
const BoundingBoxFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BoundingBoxFilterSensitiveLog = BoundingBoxFilterSensitiveLog;
const PointFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PointFilterSensitiveLog = PointFilterSensitiveLog;
const GeometryFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.GeometryFilterSensitiveLog = GeometryFilterSensitiveLog;
const RelationshipFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.RelationshipFilterSensitiveLog = RelationshipFilterSensitiveLog;
const BlockFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BlockFilterSensitiveLog = BlockFilterSensitiveLog;
const DocumentMetadataFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DocumentMetadataFilterSensitiveLog = DocumentMetadataFilterSensitiveLog;
const HumanLoopActivationOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.HumanLoopActivationOutputFilterSensitiveLog = HumanLoopActivationOutputFilterSensitiveLog;
const AnalyzeDocumentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AnalyzeDocumentResponseFilterSensitiveLog = AnalyzeDocumentResponseFilterSensitiveLog;
const AnalyzeExpenseRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AnalyzeExpenseRequestFilterSensitiveLog = AnalyzeExpenseRequestFilterSensitiveLog;
const ExpenseDetectionFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ExpenseDetectionFilterSensitiveLog = ExpenseDetectionFilterSensitiveLog;
const ExpenseTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ExpenseTypeFilterSensitiveLog = ExpenseTypeFilterSensitiveLog;
const ExpenseFieldFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ExpenseFieldFilterSensitiveLog = ExpenseFieldFilterSensitiveLog;
const LineItemFieldsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.LineItemFieldsFilterSensitiveLog = LineItemFieldsFilterSensitiveLog;
const LineItemGroupFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.LineItemGroupFilterSensitiveLog = LineItemGroupFilterSensitiveLog;
const ExpenseDocumentFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ExpenseDocumentFilterSensitiveLog = ExpenseDocumentFilterSensitiveLog;
const AnalyzeExpenseResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AnalyzeExpenseResponseFilterSensitiveLog = AnalyzeExpenseResponseFilterSensitiveLog;
const AnalyzeIDRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AnalyzeIDRequestFilterSensitiveLog = AnalyzeIDRequestFilterSensitiveLog;
const NormalizedValueFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.NormalizedValueFilterSensitiveLog = NormalizedValueFilterSensitiveLog;
const AnalyzeIDDetectionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AnalyzeIDDetectionsFilterSensitiveLog = AnalyzeIDDetectionsFilterSensitiveLog;
const IdentityDocumentFieldFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.IdentityDocumentFieldFilterSensitiveLog = IdentityDocumentFieldFilterSensitiveLog;
const IdentityDocumentFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.IdentityDocumentFilterSensitiveLog = IdentityDocumentFilterSensitiveLog;
const AnalyzeIDResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AnalyzeIDResponseFilterSensitiveLog = AnalyzeIDResponseFilterSensitiveLog;
const DetectDocumentTextRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DetectDocumentTextRequestFilterSensitiveLog = DetectDocumentTextRequestFilterSensitiveLog;
const DetectDocumentTextResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DetectDocumentTextResponseFilterSensitiveLog = DetectDocumentTextResponseFilterSensitiveLog;
const DocumentLocationFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DocumentLocationFilterSensitiveLog = DocumentLocationFilterSensitiveLog;
const GetDocumentAnalysisRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.GetDocumentAnalysisRequestFilterSensitiveLog = GetDocumentAnalysisRequestFilterSensitiveLog;
const WarningFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.WarningFilterSensitiveLog = WarningFilterSensitiveLog;
const GetDocumentAnalysisResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.GetDocumentAnalysisResponseFilterSensitiveLog = GetDocumentAnalysisResponseFilterSensitiveLog;
const GetDocumentTextDetectionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.GetDocumentTextDetectionRequestFilterSensitiveLog = GetDocumentTextDetectionRequestFilterSensitiveLog;
const GetDocumentTextDetectionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.GetDocumentTextDetectionResponseFilterSensitiveLog = GetDocumentTextDetectionResponseFilterSensitiveLog;
const GetExpenseAnalysisRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.GetExpenseAnalysisRequestFilterSensitiveLog = GetExpenseAnalysisRequestFilterSensitiveLog;
const GetExpenseAnalysisResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.GetExpenseAnalysisResponseFilterSensitiveLog = GetExpenseAnalysisResponseFilterSensitiveLog;
const NotificationChannelFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.NotificationChannelFilterSensitiveLog = NotificationChannelFilterSensitiveLog;
const OutputConfigFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.OutputConfigFilterSensitiveLog = OutputConfigFilterSensitiveLog;
const StartDocumentAnalysisRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.StartDocumentAnalysisRequestFilterSensitiveLog = StartDocumentAnalysisRequestFilterSensitiveLog;
const StartDocumentAnalysisResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.StartDocumentAnalysisResponseFilterSensitiveLog = StartDocumentAnalysisResponseFilterSensitiveLog;
const StartDocumentTextDetectionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.StartDocumentTextDetectionRequestFilterSensitiveLog = StartDocumentTextDetectionRequestFilterSensitiveLog;
const StartDocumentTextDetectionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.StartDocumentTextDetectionResponseFilterSensitiveLog = StartDocumentTextDetectionResponseFilterSensitiveLog;
const StartExpenseAnalysisRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.StartExpenseAnalysisRequestFilterSensitiveLog = StartExpenseAnalysisRequestFilterSensitiveLog;
const StartExpenseAnalysisResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.StartExpenseAnalysisResponseFilterSensitiveLog = StartExpenseAnalysisResponseFilterSensitiveLog;
