import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { AnalyzeIDRequest, AnalyzeIDResponse } from "../models/models_0";
import { ServiceInputTypes, ServiceOutputTypes, TextractClientResolvedConfig } from "../TextractClient";
export interface AnalyzeIDCommandInput extends AnalyzeIDRequest {
}
export interface AnalyzeIDCommandOutput extends AnalyzeIDResponse, __MetadataBearer {
}
/**
 * <p>Analyzes identity documents for relevant information. This information is extracted
 *          and returned as <code>IdentityDocumentFields</code>, which records both the normalized
 *          field and value of the extracted text.Unlike other Amazon Textract operations, <code>AnalyzeID</code>
 *       doesn't return any Geometry data.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { TextractClient, AnalyzeIDCommand } from "@aws-sdk/client-textract"; // ES Modules import
 * // const { TextractClient, AnalyzeIDCommand } = require("@aws-sdk/client-textract"); // CommonJS import
 * const client = new TextractClient(config);
 * const command = new AnalyzeIDCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link AnalyzeIDCommandInput} for command's `input` shape.
 * @see {@link AnalyzeIDCommandOutput} for command's `response` shape.
 * @see {@link TextractClientResolvedConfig | config} for TextractClient's `config` shape.
 *
 */
export declare class AnalyzeIDCommand extends $Command<AnalyzeIDCommandInput, AnalyzeIDCommandOutput, TextractClientResolvedConfig> {
    readonly input: AnalyzeIDCommandInput;
    constructor(input: AnalyzeIDCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TextractClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AnalyzeIDCommandInput, AnalyzeIDCommandOutput>;
    private serialize;
    private deserialize;
}
