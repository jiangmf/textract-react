import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { AnalyzeExpenseRequest, AnalyzeExpenseResponse } from "../models/models_0";
import { ServiceInputTypes, ServiceOutputTypes, TextractClientResolvedConfig } from "../TextractClient";
export interface AnalyzeExpenseCommandInput extends AnalyzeExpenseRequest {
}
export interface AnalyzeExpenseCommandOutput extends AnalyzeExpenseResponse, __MetadataBearer {
}
/**
 * <p>
 *             <code>AnalyzeExpense</code> synchronously analyzes an input document for financially related relationships between text.</p>
 *          <p>Information is returned as <code>ExpenseDocuments</code> and seperated as follows.</p>
 *          <ul>
 *             <li>
 *                <p>
 *                   <code>LineItemGroups</code>- A data set containing <code>LineItems</code> which
 *          store information about the lines of text, such as an item purchased and its price on a receipt.</p>
 *             </li>
 *             <li>
 *                <p>
 *                   <code>SummaryFields</code>- Contains all other information a receipt, such as header information
 *          or the vendors name.</p>
 *             </li>
 *          </ul>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { TextractClient, AnalyzeExpenseCommand } from "@aws-sdk/client-textract"; // ES Modules import
 * // const { TextractClient, AnalyzeExpenseCommand } = require("@aws-sdk/client-textract"); // CommonJS import
 * const client = new TextractClient(config);
 * const command = new AnalyzeExpenseCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link AnalyzeExpenseCommandInput} for command's `input` shape.
 * @see {@link AnalyzeExpenseCommandOutput} for command's `response` shape.
 * @see {@link TextractClientResolvedConfig | config} for TextractClient's `config` shape.
 *
 */
export declare class AnalyzeExpenseCommand extends $Command<AnalyzeExpenseCommandInput, AnalyzeExpenseCommandOutput, TextractClientResolvedConfig> {
    readonly input: AnalyzeExpenseCommandInput;
    constructor(input: AnalyzeExpenseCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TextractClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AnalyzeExpenseCommandInput, AnalyzeExpenseCommandOutput>;
    private serialize;
    private deserialize;
}
